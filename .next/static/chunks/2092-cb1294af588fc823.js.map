{"version":3,"file":"static/chunks/2092-cb1294af588fc823.js","mappings":";;;;;;AAAa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kCAAkC,GAAG,yBAAyB;AAC9D;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;;;;;;;;ACxCa;AACb;AACA,6CAA6C;AAC7C;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAmB,GAAG,8BAA8B,GAAG,qBAAqB,GAAG,wBAAwB;AACvG,eAAe,mBAAO,CAAC,KAAQ;AAC/B,iCAAiC,mBAAO,CAAC,KAAkB;AAC3D,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;;;;;;;;ACpCa;AACb;AACA;AACA;AACA;AACA;AACA,mCAAmC,oCAAoC,gBAAgB;AACvF,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,oCAAoC,GAAG,0BAA0B;AACjE,gBAAgB,mBAAO,CAAC,KAAiB;AACzC,cAAc,mBAAO,CAAC,IAAS;AAC/B,YAAY,mBAAO,CAAC,KAAO;AAC3B,YAAY,mBAAO,CAAC,IAAO;AAC3B,2BAA2B,mBAAO,CAAC,KAAsB;AACzD,aAAa,mBAAO,CAAC,KAAsB;AAC3C,aAAa,mBAAO,CAAC,KAAO;AAC5B,aAAa,mBAAO,CAAC,IAAO;AAC5B,aAAa,mBAAO,CAAC,KAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,kDAAkD;AAC3E;AACA;AACA;AACA,qBAAqB,iEAAiE;AACtF;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;;;;;;;;ACrEa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,eAAe;AACf;AACA;AACA;AACA;AACA,CAAC,gCAAgC,eAAe,KAAK;AACrD;;;;;;;;ACRa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,kCAAkC,gBAAgB,KAAK;AACxD,kBAAe;AACf;;;;;;;;ACda;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,6BAA6B;AAC7B,eAAe,mBAAO,CAAC,KAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;;;;;;;;ACba;AACb;AACA,6CAA6C;AAC7C;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,4BAA4B,GAAG,wBAAwB,GAAG,0BAA0B,GAAG,mBAAmB,GAAG,yBAAyB,GAAG,qBAAqB,GAAG,2BAA2B,GAAG,8BAA8B;AAC7N,iCAAiC,mBAAO,CAAC,IAAU;AACnD,cAAc,mBAAO,CAAC,KAAO;AAC7B,eAAe,mBAAO,CAAC,KAAQ;AAC/B,2BAA2B,mBAAO,CAAC,KAAsB;AACzD,iBAAiB,mBAAO,CAAC,KAAkB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,CAAC,wCAAwC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,mBAAmB,WAAW;AAC9B;AACA;AACA;AACA;AACA,wDAAwD,6CAA6C;AACrG;AACA;AACA,4BAA4B;AAC5B;;;;;;;;;;;;;;;ACvHsD;AACvB;AAC4B;AACpD,0BAA0B,6CAAgB;AACjD;AACA;AACA;AACA;AACA,sBAAsB,gDAAmB,CAAC,qEAAc,EAAE,mFAAQ;AAClE;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG,gBAAgB,gDAAmB;AACtC;AACA;AACA,GAAG;AACH,CAAC;AACD;AACO;AACP;AACA;AACA;;;;;;;;;;;;;;;ACvBsD;AACvB;AAC4B;AACpD,8BAA8B,6CAAgB;AACrD;AACA;AACA;AACA;AACA,sBAAsB,gDAAmB,CAAC,qEAAc,EAAE,mFAAQ;AAClE;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG,gBAAgB,gDAAmB;AACtC;AACA;AACA,GAAG;AACH,CAAC;AACD;AACO;AACP;AACA;AACA;;;;;;;;;;;;;;;ACvBsD;AACvB;AAC4B;AACpD,+BAA+B,6CAAgB;AACtD;AACA;AACA;AACA;AACA,sBAAsB,gDAAmB,CAAC,qEAAc,EAAE,mFAAQ;AAClE;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG,gBAAgB,gDAAmB;AACtC;AACA;AACA,GAAG;AACH,CAAC;AACD;AACO;AACP;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvBO;AACP;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT,2BAA2B,EAAE;AAC7B;AACA;;;ACzBO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,uBAAuB;AACvB,4BAA4B,EAAE;AAC9B;AACA;;;ACdO;AACP;AACA;AACA;AACA;AACA;AACA,gBAAgB,cAAc;AAC9B;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,0BAA0B,KAAK;AAC/B;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,EAAE;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACjFO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,QAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,uBAAuB;AACvB,0BAA0B,GAAG;AAC7B;AACA;;;ACvBO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,uBAAuB;AACvB,gCAAgC,EAAE;AAClC;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACjDO;AACP;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB,gBAAgB,kCAAkC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA,0BAA0B,KAAK,KAAK,EAAE;AACtC;AACA,iBAAiB,EAAE;AACnB,6CAA6C,EAAE;AAC/C,kBAAkB,EAAE;AACpB,iBAAiB,EAAE,qBAAqB,EAAE;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AChFO;AACP;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT,0BAA0B,EAAE;AAC5B;AACA;;;AChBO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT,4BAA4B,EAAE;AAC9B;AACA;;;ACxBO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,uBAAuB;AACvB,0BAA0B,EAAE;AAC5B;AACA;;;ACZO;AACP;AACA;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT,0BAA0B,EAAE;AAC5B;AACA;;;ACvBO;AACP;AACA;AACA;AACA;AACA;AACA,mBAAmB,GAAG;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,uBAAuB;AACvB;AACA,sBAAsB,GAAG;AACzB,iCAAiC,GAAG;AACpC,mCAAmC,EAAE;AACrC,+BAA+B,EAAE,GAAG,EAAE;AACtC;AACA;AACA;;;ACzBO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,uBAAuB;AACvB,+BAA+B,EAAE;AACjC;AACA;;;ACjCO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT,0BAA0B,EAAE;AAC5B;AACA;;;ACxBO;AACP;AACA;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT,0BAA0B,EAAE;AAC5B;AACA;;;ACvBO;AACP;AACA;AACA;AACA,gBAAgB,2BAA2B;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,wBAAwB,EAAE;AAC1B,SAAS;AACT;AACA,sBAAsB,EAAE;AACxB,mCAAmC,EAAE;AACrC,sBAAsB,EAAE;AACxB;AACA;AACA;;;AC3CO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,QAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT,0BAA0B,GAAG;AAC7B;AACA;;;ACrCO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,QAAQ;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT,0BAA0B,GAAG;AAC7B;AACA;;;ACtCO;AACP;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,oBAAoB,GAAG;AACvB,0BAA0B,EAAE,IAAI,GAAG;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,QAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACnGO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,uBAAuB;AACvB,0BAA0B,EAAE;AAC5B;AACA;;;ACbO;AACP;AACA;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT,+BAA+B,EAAE;AACjC;AACA;;;ACrBO;AACP;AACA;AACA;AACA;AACA,gBAAgB,0BAA0B;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,IAAI;AACzC;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT,0BAA0B,EAAE,IAAI,EAAE;AAClC,2BAA2B,EAAE,KAAK,EAAE;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AClDO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT,0BAA0B,EAAE;AAC5B;AACA;;;AC5BO;AACP;AACA;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT,0BAA0B,GAAG;AAC7B;AACA;;;ACxBO;AACP;AACA;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT,0BAA0B,EAAE;AAC5B;AACA;;;ACxBO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,oBAAoB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT,+BAA+B,IAAI;AACnC;AACA;;;ACzBO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,0BAA0B,GAAG,IAAI,GAAG;AACpC;AACA;AACA;AACA;AACA;AACA,wBAAwB,QAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,QAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,QAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACzDO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,uBAAuB;AACvB,0BAA0B,EAAE;AAC5B;AACA;;;ACxBO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,uBAAuB;AACvB,yCAAyC,EAAE;AAC3C;AACA;;;ACZO;AACP;AACA;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT,+BAA+B,EAAE;AACjC;AACA;;;ACzBO;AACP;AACA;AACA;AACA,gBAAgB,0BAA0B;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA,2BAA2B,EAAE;AAC7B,+BAA+B,EAAE;AACjC,6BAA6B,EAAE;AAC/B,4BAA4B,EAAE;AAC9B;AACA;AACA,4BAA4B,EAAE;AAC9B,4BAA4B,EAAE;AAC9B,0BAA0B,EAAE;AAC5B,0BAA0B,EAAE;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACrFO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,uBAAuB;AACvB,0BAA0B,GAAG;AAC7B;AACA;;;ACzBO;AACP;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT,2BAA2B,EAAE;AAC7B;AACA;;;ACxBO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA,uBAAuB,EAAE;AACzB,uBAAuB,GAAG;AAC1B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AClEoC;AACA;AACE;AACD;AACH;AACc;AACZ;AACA;AACF;AACE;AACF;AACE;AACF;AACE;AACA;AACJ;AACE;AACM;AACE;AACV;AACY;AACV;AACA;AACI;AACF;AACF;AACA;AACoB;AAChB;AACN;AACE;AACU;AACI;;;AChChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACtD+V;AAC/V;AACA,IAAI,OAAO;AACX,IAAI,OAAO;AACX,IAAI,QAAQ;AACZ,IAAI,OAAO;AACX,IAAI,MAAM;AACV,IAAI,aAAa;AACjB,IAAI,OAAO;AACX,IAAI,OAAO;AACX,IAAI,MAAM;AACV,IAAI,OAAO;AACX,IAAI,MAAM;AACV,IAAI,OAAO;AACX,IAAI,MAAM;AACV,IAAI,OAAO;AACX,IAAI,OAAO;AACX,IAAI,KAAK;AACT,IAAI,MAAM;AACV,IAAI,SAAS;AACb,IAAI,UAAU;AACd,IAAI,KAAK;AACT,IAAI,WAAW;AACf,IAAI,MAAM;AACV,IAAI,MAAM;AACV,IAAI,QAAQ;AACZ,IAAI,OAAO;AACX,IAAI,MAAM;AACV,IAAI,MAAM;AACV,IAAI,gBAAgB;AACpB,IAAI,QAAQ;AACZ,IAAI,KAAK;AACT,IAAI,MAAM;AACV,IAAI,WAAW;AACf,IAAI,aAAa;AACjB;AACqB;AAC0U;AACxT;;;;;;;;ACtCvC,eAAe,mBAAO,CAAC,KAAY;;AAEnC;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,UAAU;AACrB,WAAW,UAAU;AACrB,aAAa,GAAG;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AC/BA,mBAAmB,mBAAO,CAAC,KAAiB;AAC5C,kBAAkB,mBAAO,CAAC,KAAe;AACzC,WAAW,mBAAO,CAAC,IAAQ;;AAE3B;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;ACxBA,iBAAiB,mBAAO,CAAC,KAAe;AACxC,gBAAgB,mBAAO,CAAC,KAAa;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,UAAU;AACrB,WAAW,QAAQ;AACnB,aAAa,GAAG;AAChB;AACA;AACA;AACA,OAAO,8CAA8C;AACrD,OAAO,+CAA+C;AACtD,OAAO;AACP;AACA;AACA,+BAA+B,oBAAoB;AACnD;AACA;AACA;AACA,mBAAmB,0BAA0B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;ACzCA,oBAAoB,mBAAO,CAAC,KAAkB;AAC9C,mBAAmB,mBAAO,CAAC,KAAiB;AAC5C,gBAAgB,mBAAO,CAAC,KAAa;;AAErC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,UAAU;AACrB,WAAW,QAAQ;AACnB,aAAa,QAAQ;AACrB;AACA;AACA;AACA,OAAO,oCAAoC;AAC3C,OAAO,oCAAoC;AAC3C,OAAO;AACP;AACA;AACA,oCAAoC,4BAA4B;AAChE;AACA;AACA;AACA,wBAAwB,iCAAiC;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;ACtDA,oBAAoB,mBAAO,CAAC,KAAkB;AAC9C,mBAAmB,mBAAO,CAAC,KAAiB;AAC5C,gBAAgB,mBAAO,CAAC,KAAa;;AAErC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,UAAU;AACrB,WAAW,QAAQ;AACnB,aAAa,QAAQ;AACrB;AACA;AACA;AACA,OAAO,mCAAmC;AAC1C,OAAO,oCAAoC;AAC3C,OAAO;AACP;AACA;AACA,wCAAwC,6BAA6B;AACrE;AACA;AACA;AACA,4BAA4B,kCAAkC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AC1DA;AACA;AACA;AACA;AACA;AACA,IAAI,IAAyD;AAC7D;AACA,MAAM,EAKyB;AAC/B,CAAC;AACD,qCAAqC;AACrC;AACA;AACA;AACA;AACA,mBAAmB,8BAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E,8BAAmB;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,8BAAmB;AAC7B;AACA;AACA,UAAU,8BAAmB;AAC7B;AACA;AACA,UAAU,8BAAmB,uBAAuB;AACpD;AACA;AACA,UAAU,8BAAmB;AAC7B,eAAe,8BAAmB;AAClC;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,UAAU,8BAAmB;AAC7B;AACA,oCAAoC,4BAA4B;AAChE,0CAA0C;AAC1C,WAAW,8BAAmB;AAC9B;AACA;AACA;AACA;AACA,UAAU,8BAAmB,kCAAkC;AAC/D;AACA;AACA,UAAU,8BAAmB;AAC7B;AACA;AACA,iBAAiB,8BAAmB,CAAC,8BAAmB;AACxD,UAAU;AACV;AACA;AACA;AACA;;AAEA,kBAAkB,UAAU,4DAA4D,sCAAsC,8CAA8C,EAAE,sCAAsC,2CAA2C,EAAE,EAAE,4DAA4D,sCAAsC,6CAA6C,EAAE,EAAE,6DAA6D,sCAAsC,6BAA6B,EAAE,EAAE,4DAA4D,sCAAsC,gCAAgC,EAAE,EAAE,2DAA2D,sCAAsC,+BAA+B,EAAE,EAAE,mEAAmE,sCAAsC,iCAAiC,EAAE,EAAE,4DAA4D,sCAAsC,eAAe,EAAE,EAAE,4DAA4D,sCAAsC,6BAA6B,EAAE,EAAE,4DAA4D,sCAAsC,6BAA6B,EAAE,sCAAsC,6BAA6B,EAAE,sCAAsC,6BAA6B,EAAE,sCAAsC,6BAA6B,EAAE,EAAE,2DAA2D,sCAAsC,gCAAgC,EAAE,sCAAsC,gCAAgC,EAAE,sCAAsC,kCAAkC,EAAE,EAAE,4DAA4D,sCAAsC,iCAAiC,EAAE,EAAE,2DAA2D,sCAAsC,qDAAqD,EAAE,EAAE,4DAA4D,sCAAsC,gCAAgC,EAAE,EAAE,4DAA4D,sCAAsC,oEAAoE,EAAE,EAAE,0DAA0D,sCAAsC,iDAAiD,EAAE,EAAE,2DAA2D,sCAAsC,+CAA+C,EAAE,sCAAsC,8BAA8B,EAAE,EAAE,8DAA8D,sCAAsC,+BAA+B,EAAE,EAAE,+DAA+D,sCAAsC,2DAA2D,EAAE,sCAAsC,8DAA8D,EAAE,sCAAsC,8DAA8D,EAAE,EAAE,0DAA0D,sCAAsC,+BAA+B,EAAE,EAAE,gEAAgE,sCAAsC,6BAA6B,EAAE,sCAAsC,6BAA6B,EAAE,sCAAsC,6BAA6B,EAAE,EAAE,2DAA2D,sCAAsC,+BAA+B,EAAE,EAAE,6DAA6D,sCAAsC,6CAA6C,EAAE,EAAE,4DAA4D,sCAAsC,+BAA+B,EAAE,sCAAsC,+BAA+B,EAAE,sCAAsC,+BAA+B,EAAE,EAAE,6DAA6D,sCAAsC,8BAA8B,EAAE,EAAE,6DAA6D,sCAAsC,+BAA+B,EAAE,EAAE,0DAA0D,sCAAsC,+CAA+C,EAAE,EAAE,2DAA2D,sCAAsC,gCAAgC,EAAE,EAAE,mEAAmE,sCAAsC,6BAA6B,EAAE,sCAAsC,+BAA+B,EAAE,sCAAsC,6BAA6B,EAAE,sCAAsC,+BAA+B,EAAE,sCAAsC,6BAA6B,EAAE;;AAE5kK,OAAO;AACP;AACA,iCAAiC,+BAAmB;;AAEpD;;;AAGA,gBAAgB,+BAAmB;AACnC,iBAAiB,+BAAmB;AACpC,WAAW,+BAAmB;;AAE9B;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA,GAAG;AACH;;AAEA;;AAEA,OAAO;AACP;AACA;;AAEA;;;AAGA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,aAAa;AACxB,WAAW,MAAM;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,WAAW;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA,yCAAyC,QAAQ;AACjD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,OAAO;AACP;AACA;;AAEA;;;AAGA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,kBAAkB;AAC7B,WAAW,iBAAiB;AAC5B,WAAW,kBAAkB;AAC7B,WAAW,kBAAkB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;;AAEA,OAAO;AACP;AACA,iCAAiC,gCAAmB;;AAEpD;;;AAGA,WAAW,gCAAmB;AAC9B,mBAAmB,gCAAmB;;AAEtC;AACA;AACA;AACA,WAAW,MAAM;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,aAAa;AACxB;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,sBAAsB;AACnC;AACA;AACA;AACA;AACA;;AAEA,kBAAkB,sBAAsB;AACxC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,kBAAkB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,oBAAoB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,kBAAkB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,kBAAkB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;;AAEA,OAAO;AACP;AACA,CAAC","sources":["webpack://_N_E/./node_modules/@opencollective/taxes/dist/european-countries.js","webpack://_N_E/./node_modules/@opencollective/taxes/dist/gst.js","webpack://_N_E/./node_modules/@opencollective/taxes/dist/index.js","webpack://_N_E/./node_modules/@opencollective/taxes/dist/types/TaxType.js","webpack://_N_E/./node_modules/@opencollective/taxes/dist/types/TierType.js","webpack://_N_E/./node_modules/@opencollective/taxes/dist/utils.js","webpack://_N_E/./node_modules/@opencollective/taxes/dist/vat.js","webpack://_N_E/./node_modules/@styled-icons/fa-brands/Alipay/Alipay.esm.js","webpack://_N_E/./node_modules/@styled-icons/fa-solid/CreditCard/CreditCard.esm.js","webpack://_N_E/./node_modules/@styled-icons/fa-solid/ExchangeAlt/ExchangeAlt.esm.js","webpack://_N_E/./node_modules/jsvat/lib/es6/lib/countries/austria.js","webpack://_N_E/./node_modules/jsvat/lib/es6/lib/countries/belgium.js","webpack://_N_E/./node_modules/jsvat/lib/es6/lib/countries/bulgaria.js","webpack://_N_E/./node_modules/jsvat/lib/es6/lib/countries/croatiat.js","webpack://_N_E/./node_modules/jsvat/lib/es6/lib/countries/cyprus.js","webpack://_N_E/./node_modules/jsvat/lib/es6/lib/countries/czechRepublic.js","webpack://_N_E/./node_modules/jsvat/lib/es6/lib/countries/denmark.js","webpack://_N_E/./node_modules/jsvat/lib/es6/lib/countries/estonia.js","webpack://_N_E/./node_modules/jsvat/lib/es6/lib/countries/europe.js","webpack://_N_E/./node_modules/jsvat/lib/es6/lib/countries/finland.js","webpack://_N_E/./node_modules/jsvat/lib/es6/lib/countries/france.js","webpack://_N_E/./node_modules/jsvat/lib/es6/lib/countries/germany.js","webpack://_N_E/./node_modules/jsvat/lib/es6/lib/countries/greece.js","webpack://_N_E/./node_modules/jsvat/lib/es6/lib/countries/hungary.js","webpack://_N_E/./node_modules/jsvat/lib/es6/lib/countries/ireland.js","webpack://_N_E/./node_modules/jsvat/lib/es6/lib/countries/italy.js","webpack://_N_E/./node_modules/jsvat/lib/es6/lib/countries/latvia.js","webpack://_N_E/./node_modules/jsvat/lib/es6/lib/countries/lithuania.js","webpack://_N_E/./node_modules/jsvat/lib/es6/lib/countries/luxembourg.js","webpack://_N_E/./node_modules/jsvat/lib/es6/lib/countries/malta.js","webpack://_N_E/./node_modules/jsvat/lib/es6/lib/countries/netherlands.js","webpack://_N_E/./node_modules/jsvat/lib/es6/lib/countries/norway.js","webpack://_N_E/./node_modules/jsvat/lib/es6/lib/countries/poland.js","webpack://_N_E/./node_modules/jsvat/lib/es6/lib/countries/portugal.js","webpack://_N_E/./node_modules/jsvat/lib/es6/lib/countries/romania.js","webpack://_N_E/./node_modules/jsvat/lib/es6/lib/countries/russia.js","webpack://_N_E/./node_modules/jsvat/lib/es6/lib/countries/serbia.js","webpack://_N_E/./node_modules/jsvat/lib/es6/lib/countries/slovakiaRepublic.js","webpack://_N_E/./node_modules/jsvat/lib/es6/lib/countries/slovenia.js","webpack://_N_E/./node_modules/jsvat/lib/es6/lib/countries/spain.js","webpack://_N_E/./node_modules/jsvat/lib/es6/lib/countries/sweden.js","webpack://_N_E/./node_modules/jsvat/lib/es6/lib/countries/switzerland.js","webpack://_N_E/./node_modules/jsvat/lib/es6/lib/countries/unitedKingdom.js","webpack://_N_E/./node_modules/jsvat/lib/es6/lib/countries/index.js","webpack://_N_E/./node_modules/jsvat/lib/es6/lib/jsvat.js","webpack://_N_E/./node_modules/jsvat/lib/es6/index.js","webpack://_N_E/./node_modules/lodash/_baseExtremum.js","webpack://_N_E/./node_modules/lodash/_createFind.js","webpack://_N_E/./node_modules/lodash/find.js","webpack://_N_E/./node_modules/lodash/findIndex.js","webpack://_N_E/./node_modules/lodash/findLastIndex.js","webpack://_N_E/./node_modules/vatrates/dist/vatrates.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isMemberOfTheEuropeanUnion = exports.europeanCountries = void 0;\n/** A list of all countries codes that are part of the European Union */\nexports.europeanCountries = [\n    'AT',\n    'BE',\n    'BG',\n    'HR',\n    'CY',\n    'CZ',\n    'DK',\n    'EE',\n    'FI',\n    'FR',\n    'DE',\n    'GR',\n    'HU',\n    'IE',\n    'IT',\n    'LV',\n    'LT',\n    'LU',\n    'MT',\n    'NL',\n    'PL',\n    'PT',\n    'RO',\n    'SK',\n    'SI',\n    'ES',\n    'SE',\n];\n/**\n * Return true if the country is a member of the European Union.\n */\nvar isMemberOfTheEuropeanUnion = function (countryCode) {\n    return Boolean(countryCode) && exports.europeanCountries.includes(countryCode);\n};\nexports.isMemberOfTheEuropeanUnion = isMemberOfTheEuropeanUnion;\n//# sourceMappingURL=european-countries.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.gstMayApply = exports.isTierTypeSubjectToGST = exports.accountHasGST = exports.GST_RATE_PERCENT = void 0;\nvar lodash_1 = require(\"lodash\");\nvar TierType_1 = __importDefault(require(\"./types/TierType\"));\nexports.GST_RATE_PERCENT = 15;\n/**\n * Returns true if GST is enabled for this account\n */\nvar accountHasGST = function (account) {\n    return Boolean(lodash_1.get(account, 'settings.GST') ||\n        lodash_1.get(account, 'parent.settings.GST') ||\n        lodash_1.get(account, 'parentCollective.settings.GST'));\n};\nexports.accountHasGST = accountHasGST;\n/**\n * Returns true if the given tier type can be subject to VAT\n */\nvar isTierTypeSubjectToGST = function (tierType) {\n    var taxedTiersTypes = [TierType_1.default.SUPPORT, TierType_1.default.SERVICE, TierType_1.default.PRODUCT, TierType_1.default.TICKET];\n    return taxedTiersTypes.includes(tierType);\n};\nexports.isTierTypeSubjectToGST = isTierTypeSubjectToGST;\n/**\n * Returns true if GST may apply.\n *\n * @param tierType - the tier type (eg. SUPPORT, TICKET...)\n * @param originCOuntry - two letters country where GST is applied\n */\nvar gstMayApply = function (tierType) {\n    return exports.isTierTypeSubjectToGST(tierType);\n};\nexports.gstMayApply = gstMayApply;\n//# sourceMappingURL=gst.js.map","\"use strict\";\n/**\n * Utils to calculate taxes.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getApplicableTaxesForCountry = exports.getApplicableTaxes = void 0;\nvar TaxType_1 = require(\"./types/TaxType\");\nvar utils_1 = require(\"./utils\");\nvar vat_1 = require(\"./vat\");\nvar gst_1 = require(\"./gst\");\nvar european_countries_1 = require(\"./european-countries\");\n__exportStar(require(\"./european-countries\"), exports);\n__exportStar(require(\"./vat\"), exports);\n__exportStar(require(\"./gst\"), exports);\n__exportStar(require(\"./types/TaxType\"), exports);\n/**\n * Returns a list of taxes that may apply for this countribution type\n */\nvar getApplicableTaxes = function (account, host, tierType) {\n    var taxes = [];\n    var accountCountry = utils_1.getCountryFromAccount(account);\n    var hostCountry = utils_1.getCountryFromAccount(host);\n    var vatType = vat_1.getAccountVATType(account, host);\n    if (vatType) {\n        var vatOriginCountry = void 0;\n        if (vatType === 'OWN') {\n            vatOriginCountry = vat_1.getVatOriginCountry(tierType, accountCountry, accountCountry);\n        }\n        else {\n            vatOriginCountry = vat_1.getVatOriginCountry(tierType, hostCountry, accountCountry);\n        }\n        if (vat_1.vatMayApply(tierType, vatOriginCountry)) {\n            var vatRate = vat_1.getStandardVatRate(tierType, vatOriginCountry);\n            taxes.push({ type: TaxType_1.TaxType.VAT, percentage: vatRate });\n        }\n    }\n    if (gst_1.accountHasGST(host) && gst_1.gstMayApply(tierType)) {\n        taxes.push({ type: TaxType_1.TaxType.GST, percentage: gst_1.GST_RATE_PERCENT });\n    }\n    return taxes;\n};\nexports.getApplicableTaxes = getApplicableTaxes;\n/**\n * Returns a list of taxes that may apply for this account\n */\nvar getApplicableTaxesForCountry = function (country) {\n    var taxes = [];\n    if (!country) {\n        return [];\n    }\n    else if (european_countries_1.isMemberOfTheEuropeanUnion(country)) {\n        taxes.push(TaxType_1.TaxType.VAT);\n    }\n    else if (country === 'NZ') {\n        taxes.push(TaxType_1.TaxType.GST);\n    }\n    return taxes;\n};\nexports.getApplicableTaxesForCountry = getApplicableTaxesForCountry;\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TaxType = void 0;\nvar TaxType;\n(function (TaxType) {\n    TaxType[\"VAT\"] = \"VAT\";\n    TaxType[\"GST\"] = \"GST\";\n})(TaxType = exports.TaxType || (exports.TaxType = {}));\n//# sourceMappingURL=TaxType.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TierType = void 0;\nvar TierType;\n(function (TierType) {\n    TierType[\"SUPPORT\"] = \"SUPPORT\";\n    TierType[\"SERVICE\"] = \"SERVICE\";\n    TierType[\"PRODUCT\"] = \"PRODUCT\";\n    TierType[\"TICKET\"] = \"TICKET\";\n    TierType[\"TIER\"] = \"TIER\";\n    TierType[\"MEMBERSHIP\"] = \"MEMBERSHIP\";\n    TierType[\"DONATION\"] = \"DONATION\";\n})(TierType = exports.TierType || (exports.TierType = {}));\nexports.default = TierType;\n//# sourceMappingURL=TierType.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getCountryFromAccount = void 0;\nvar lodash_1 = require(\"lodash\");\nvar getCountryFromAccount = function (account) {\n    if (!account) {\n        return null;\n    }\n    return ((lodash_1.get(account.location, 'country') ||\n        lodash_1.get(account.parent, 'location.country') ||\n        lodash_1.get(account.parentCollective, 'location.country')) || null);\n};\nexports.getCountryFromAccount = getCountryFromAccount;\n//# sourceMappingURL=utils.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.checkVATNumberFormat = exports.getVatPercentage = exports.getStandardVatRate = exports.vatMayApply = exports.getAccountVATType = exports.accountHasVAT = exports.getVatOriginCountry = exports.isTierTypeSubjectToVAT = void 0;\nvar vatrates_1 = __importDefault(require(\"vatrates\"));\nvar jsvat_1 = require(\"jsvat\");\nvar lodash_1 = require(\"lodash\");\nvar european_countries_1 = require(\"./european-countries\");\nvar TierType_1 = require(\"./types/TierType\");\nvar VATRates = new vatrates_1.default();\n/**\n * Returns true if the given tier type can be subject to VAT\n */\nvar isTierTypeSubjectToVAT = function (tierType) {\n    var taxedTiersTypes = [TierType_1.TierType.SUPPORT, TierType_1.TierType.SERVICE, TierType_1.TierType.PRODUCT, TierType_1.TierType.TICKET];\n    return taxedTiersTypes.includes(tierType);\n};\nexports.isTierTypeSubjectToVAT = isTierTypeSubjectToVAT;\n/**\n * For a given tier type, this function returns the country that should be used\n * for calculating the percentage.\n */\nvar getVatOriginCountry = function (tierType, hostCountry, collectiveCountry) {\n    if (!exports.isTierTypeSubjectToVAT(tierType)) {\n        return null;\n    }\n    var isEvent = tierType === TierType_1.TierType.TICKET;\n    var originCountry = isEvent && collectiveCountry ? collectiveCountry : hostCountry;\n    return european_countries_1.isMemberOfTheEuropeanUnion(originCountry) ? originCountry : null;\n};\nexports.getVatOriginCountry = getVatOriginCountry;\n/**\n * Returns true if VAT is enabled for this account\n */\nvar accountHasVAT = function (account, host) {\n    return Boolean(exports.getAccountVATType(account, host));\n};\nexports.accountHasVAT = accountHasVAT;\nvar AccountVATType;\n(function (AccountVATType) {\n    AccountVATType[\"OWN\"] = \"OWN\";\n    AccountVATType[\"HOST\"] = \"HOST\";\n})(AccountVATType || (AccountVATType = {}));\nvar getAccountVATType = function (account, host) {\n    var accountVATType = lodash_1.get(account, 'settings.VAT.type') ||\n        lodash_1.get(account, 'parent.settings.VAT.type') ||\n        lodash_1.get(account, 'parentCollective.settings.VAT.type');\n    if (accountVATType === 'OWN') {\n        return AccountVATType.OWN;\n    }\n    // Default to HOST VAT config if account doesn't have its own\n    var hostVATSettings = lodash_1.get(host, 'settings.VAT');\n    if (!hostVATSettings || hostVATSettings.disabled || (!hostVATSettings.number && hostVATSettings.type !== 'OWN')) {\n        return null;\n    }\n    return AccountVATType.HOST;\n};\nexports.getAccountVATType = getAccountVATType;\n/**\n * Returns true if VAT may apply.\n *\n * @param tierType - the tier type (eg. SUPPORT, TICKET...)\n * @param originCOuntry - two letters country where VAT is applied\n */\nvar vatMayApply = function (tierType, originCountry) {\n    return Boolean(originCountry) && exports.isTierTypeSubjectToVAT(tierType) && european_countries_1.isMemberOfTheEuropeanUnion(originCountry);\n};\nexports.vatMayApply = vatMayApply;\n/**\n * Get the base vat percentage for this host/collective/tier\n */\nvar getStandardVatRate = function (tierType, originCountry) {\n    if (!exports.vatMayApply(tierType, originCountry)) {\n        return 0;\n    }\n    return VATRates.getStandardRate(originCountry);\n};\nexports.getStandardVatRate = getStandardVatRate;\n/**\n * Calculates the vat rate.\n *\n * @param tierType - the tier type (eg. SUPPORT, TICKET...)\n * @param originCountry - two letters country where VAT is applied\n * @param userCountry - two letters country code of the payer\n * @param hasValidVatNumber - (optional) payer VAT identification number\n *\n * @returns {Number} `0` if no VAT applies or the percentage as a number between 0 and 100\n */\nvar getVatPercentage = function (tierType, originCountry, userCountry, hasValidVatNumber) {\n    // No VAT if the customer is outside EU\n    if (!european_countries_1.isMemberOfTheEuropeanUnion(userCountry)) {\n        return 0;\n    }\n    // If it's another European country that provides a VAT number, don't apply VAT\n    if (originCountry !== userCountry && hasValidVatNumber) {\n        return 0;\n    }\n    return exports.getStandardVatRate(tierType, originCountry);\n};\nexports.getVatPercentage = getVatPercentage;\n/**\n * Check the formatof a VAT ID number.\n *\n * @param number: The VAT number to check\n * @param countryCode: Provide a country code if you want to check against a single country code\n * @returns {object}\n *    - value: Standardized number\n *    - isValid\n *    - country: { isoCode: { short } }\n */\nvar checkVATNumberFormat = function (number, countryCode) {\n    var filteredCountries = !countryCode\n        ? jsvat_1.countries\n        : jsvat_1.countries.filter(function (country) { return country.codes.includes(countryCode); });\n    return jsvat_1.checkVAT(number, filteredCountries);\n};\nexports.checkVATNumberFormat = checkVATNumberFormat;\n//# sourceMappingURL=vat.js.map","import _extends from \"@babel/runtime/helpers/extends\";\nimport * as React from 'react';\nimport { StyledIconBase } from '@styled-icons/styled-icon';\nexport var Alipay = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var attrs = {\n    \"fill\": \"currentColor\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  };\n  return /*#__PURE__*/React.createElement(StyledIconBase, _extends({\n    iconAttrs: attrs,\n    iconVerticalAlign: \"middle\",\n    iconViewBox: \"0 0 448 512\"\n  }, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"currentColor\",\n    d: \"M377.74 32H70.26C31.41 32 0 63.41 0 102.26v307.48C0 448.59 31.41 480 70.26 480h307.48c38.52 0 69.76-31.08 70.26-69.6-45.96-25.62-110.59-60.34-171.6-88.44-32.07 43.97-84.14 81-148.62 81-70.59 0-93.73-45.3-97.04-76.37-3.97-39.01 14.88-81.5 99.52-81.5 35.38 0 79.35 10.25 127.13 24.96 16.53-30.09 26.45-60.34 26.45-60.34h-178.2v-16.7h92.08v-31.24H88.28v-19.01h109.44V92.34h50.92v50.42h109.44v19.01H248.63v31.24h88.77s-15.21 46.62-38.35 90.92c48.93 16.7 100.01 36.04 148.62 52.74V102.26C447.83 63.57 416.43 32 377.74 32zM47.28 322.95c.99 20.17 10.25 53.73 69.93 53.73 52.07 0 92.58-39.68 117.87-72.9-44.63-18.68-84.48-31.41-109.44-31.41-67.45 0-79.35 33.06-78.36 50.58z\"\n  }));\n});\nAlipay.displayName = 'Alipay';\nexport var AlipayDimensions = {\n  height: 512,\n  width: 448\n};","import _extends from \"@babel/runtime/helpers/extends\";\nimport * as React from 'react';\nimport { StyledIconBase } from '@styled-icons/styled-icon';\nexport var CreditCard = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var attrs = {\n    \"fill\": \"currentColor\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  };\n  return /*#__PURE__*/React.createElement(StyledIconBase, _extends({\n    iconAttrs: attrs,\n    iconVerticalAlign: \"middle\",\n    iconViewBox: \"0 0 576 512\"\n  }, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"currentColor\",\n    d: \"M64 32C28.7 32 0 60.7 0 96v32h576V96c0-35.3-28.7-64-64-64H64zm512 192H0v192c0 35.3 28.7 64 64 64h448c35.3 0 64-28.7 64-64V224zM112 352h64c8.8 0 16 7.2 16 16s-7.2 16-16 16h-64c-8.8 0-16-7.2-16-16s7.2-16 16-16zm112 16c0-8.8 7.2-16 16-16h128c8.8 0 16 7.2 16 16s-7.2 16-16 16H240c-8.8 0-16-7.2-16-16z\"\n  }));\n});\nCreditCard.displayName = 'CreditCard';\nexport var CreditCardDimensions = {\n  height: 512,\n  width: 576\n};","import _extends from \"@babel/runtime/helpers/extends\";\nimport * as React from 'react';\nimport { StyledIconBase } from '@styled-icons/styled-icon';\nexport var ExchangeAlt = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var attrs = {\n    \"fill\": \"currentColor\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  };\n  return /*#__PURE__*/React.createElement(StyledIconBase, _extends({\n    iconAttrs: attrs,\n    iconVerticalAlign: \"middle\",\n    iconViewBox: \"0 0 512 512\"\n  }, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"currentColor\",\n    d: \"M32 96h320V32c0-12.9 7.8-24.6 19.8-29.6s25.7-2.2 34.9 6.9l96 96c6 6 9.4 14.1 9.4 22.6s-3.4 16.6-9.4 22.6l-96 96c-9.2 9.2-22.9 11.9-34.9 6.9S352 236.8 352 223.8V160H32c-17.7 0-32-14.3-32-32s14.3-32 32-32zm448 256c17.7 0 32 14.3 32 32s-14.3 32-32 32H160v64c0 12.9-7.8 24.6-19.8 29.6s-25.7 2.2-34.9-6.9l-96-96c-6-6-9.4-14.1-9.4-22.6s3.4-16.6 9.4-22.6l96-96c9.2-9.2 22.9-11.9 34.9-6.9s19.8 16.6 19.8 29.6v64h320z\"\n  }));\n});\nExchangeAlt.displayName = 'ExchangeAlt';\nexport var ExchangeAltDimensions = {\n  height: 512,\n  width: 512\n};","export const austria = {\n    name: 'Austria',\n    codes: ['AT', 'AUT', '040'],\n    calcFn: (vat) => {\n        let total = 0;\n        for (let i = 0; i < 7; i++) {\n            const temp = Number(vat.charAt(i)) * austria.rules.multipliers.common[i];\n            if (temp > 9) {\n                total += Math.floor(temp / 10) + temp % 10;\n            }\n            else {\n                total += temp;\n            }\n        }\n        total = 10 - (total + 4) % 10;\n        if (total === 10)\n            total = 0;\n        return total === Number(vat.slice(7, 8));\n    },\n    rules: {\n        multipliers: {\n            common: [1, 2, 1, 2, 1, 2, 1]\n        },\n        regex: [/^(AT)U(\\d{8})$/]\n    }\n};\n","export const belgium = {\n    name: 'Belgium',\n    codes: ['BE', 'BEL', '056'],\n    calcFn: (vat) => {\n        const newVat = (vat.length === 9) ? ('0' + vat) : vat;\n        if (Number(newVat.slice(1, 2)) === 0)\n            return false;\n        const check = (97 - Number(newVat.slice(0, 8)) % 97);\n        return check === Number(newVat.slice(8, 10));\n    },\n    rules: {\n        multipliers: {},\n        regex: [/^(BE)(0?\\d{9})$/]\n    }\n};\n","export const bulgaria = {\n    name: 'Bulgaria',\n    codes: ['BG', 'BGR', '100'],\n    calcFn: (vat) => {\n        if (vat.length === 9)\n            return _checkNineLengthVat(vat);\n        const { multipliers } = bulgaria.rules;\n        return _isPhysicalPerson(vat, multipliers.physical) || _isForeigner(vat, multipliers) || _miscellaneousVAT(vat, multipliers);\n    },\n    rules: {\n        multipliers: {\n            physical: [2, 4, 8, 5, 10, 9, 7, 3, 6],\n            foreigner: [21, 19, 17, 13, 11, 9, 7, 3, 1],\n            miscellaneous: [4, 3, 2, 7, 6, 5, 4, 3, 2]\n        },\n        regex: [/^(BG)(\\d{9,10})$/]\n    }\n};\nfunction _increase(value, vat, from, to, incr) {\n    let result = value;\n    for (let i = from; i < to; i++) {\n        result += Number(vat.charAt(i)) * (i + incr);\n    }\n    return result;\n}\nfunction _increase2(value, vat, from, to, multipliers) {\n    let result = value;\n    for (let i = from; i < to; i++) {\n        result += Number(vat.charAt(i)) * multipliers[i];\n    }\n    return result;\n}\nfunction _checkNineLengthVat(vat) {\n    let total;\n    let temp = _increase(0, vat, 0, 8, 1);\n    const expect = Number(vat.slice(8));\n    total = temp % 11;\n    if (total !== 10)\n        return total === expect;\n    temp = _increase(0, vat, 0, 8, 3);\n    total = temp % 11;\n    if (total === 10)\n        total = 0;\n    return total === expect;\n}\nfunction _isPhysicalPerson(vat, physicalMultipliers) {\n    // 10 digit VAT code - see if it relates to a standard physical person\n    if ((/^\\d\\d[0-5]\\d[0-3]\\d\\d{4}$/).test(vat)) {\n        // Check month\n        const month = Number(vat.slice(2, 4));\n        if ((month > 0 && month < 13) || (month > 20 && month < 33) || (month > 40 && month < 53)) {\n            let total = _increase2(0, vat, 0, 9, physicalMultipliers);\n            // Establish check digit.\n            total = total % 11;\n            if (total === 10)\n                total = 0;\n            // Check to see if the check digit given is correct, If not, try next type of person\n            if (total === Number(vat.substr(9, 1)))\n                return true;\n        }\n    }\n    return false;\n}\nfunction _isForeigner(vat, multipliers) {\n    // Extract the next digit and multiply by the counter.\n    const total = _increase2(0, vat, 0, 9, multipliers.foreigner);\n    // Check to see if the check digit given is correct, If not, try next type of person\n    return total % 10 === Number(vat.substr(9, 1));\n}\nfunction _miscellaneousVAT(vat, multipliers) {\n    // Finally, if not yet identified, see if it conforms to a miscellaneous VAT number\n    let total = _increase2(0, vat, 0, 9, multipliers.miscellaneous);\n    // Establish check digit.\n    total = 11 - total % 11;\n    if (total === 10)\n        return false;\n    if (total === 11)\n        total = 0;\n    // Check to see if the check digit given is correct, If not, we have an error with the VAT number\n    const expect = Number(vat.substr(9, 1));\n    return total === expect;\n}\n","export const croatia = {\n    name: 'Croatia',\n    codes: ['HR', 'HRV', '191'],\n    calcFn: (vat) => {\n        // Checks the check digits of a Croatian VAT number using ISO 7064, MOD 11-10 for check digit.\n        let product = 10;\n        let sum = 0;\n        for (let i = 0; i < 10; i++) {\n            // Extract the next digit and implement the algorithm\n            sum = (Number(vat.charAt(i)) + product) % 10;\n            if (sum === 0) {\n                sum = 10;\n            }\n            product = (2 * sum) % 11;\n        }\n        // Now check that we have the right check digit\n        const expect = Number(vat.slice(10, 11));\n        return (product + expect) % 10 === 1;\n    },\n    rules: {\n        multipliers: {},\n        regex: [/^(HR)(\\d{11})$/]\n    }\n};\n","export const cyprus = {\n    name: 'Cyprus',\n    codes: ['CY', 'CYP', '196'],\n    calcFn: (vat) => {\n        // Not allowed to start with '12'\n        if (Number(vat.slice(0, 2)) === 12)\n            return false;\n        // Extract the next digit and multiply by the counter.\n        let total = extractAndMultiplyByCounter(vat, 0);\n        // Establish check digit using modulus 26, and translate to char. equivalent.\n        total = total % 26;\n        total = String.fromCharCode(total + 65);\n        // Check to see if the check digit given is correct\n        const expect = vat.substr(8, 1);\n        return total === expect;\n    },\n    rules: {\n        multipliers: {},\n        regex: [/^(CY)([0-59]\\d{7}[A-Z])$/]\n    }\n};\nfunction extractAndMultiplyByCounter(vat, total) {\n    let result = total;\n    for (let i = 0; i < 8; i++) {\n        let temp = Number(vat.charAt(i));\n        if (i % 2 === 0) {\n            switch (temp) {\n                case 0:\n                    temp = 1;\n                    break;\n                case 1:\n                    temp = 0;\n                    break;\n                case 2:\n                    temp = 5;\n                    break;\n                case 3:\n                    temp = 7;\n                    break;\n                case 4:\n                    temp = 9;\n                    break;\n                default:\n                    temp = temp * 2 + 3;\n            }\n        }\n        result += temp;\n    }\n    return result;\n}\n","export const czechRepublic = {\n    name: 'Czech Republic',\n    codes: ['CZ', 'CZE', '203'],\n    calcFn: (vat) => {\n        const { rules } = czechRepublic;\n        const { multipliers, additional, lookup } = rules;\n        if (!additional)\n            return false;\n        return isLegalEntities(vat, multipliers.common, additional)\n            || isIndividualType2(vat, multipliers.common, additional, lookup)\n            || isIndividualType3(vat, additional)\n            || isIndividualType1(vat, additional);\n    },\n    rules: {\n        multipliers: {\n            common: [8, 7, 6, 5, 4, 3, 2]\n        },\n        lookup: [8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 10],\n        regex: [/^(CZ)(\\d{8,10})(\\d{3})?$/],\n        additional: [\n            /^\\d{8}$/,\n            /^[0-5][0-9][0|1|5|6]\\d[0-3]\\d\\d{3}$/,\n            /^6\\d{8}$/,\n            /^\\d{2}[0-3|5-8]\\d[0-3]\\d\\d{4}$/\n        ]\n    }\n};\nfunction isLegalEntities(vat, multipliers, additional) {\n    let total = 0;\n    if (additional[0].test(vat)) {\n        // Extract the next digit and multiply by the counter.\n        for (let i = 0; i < 7; i++) {\n            total += Number(vat.charAt(i)) * multipliers[i];\n        }\n        // Establish check digit.\n        total = 11 - total % 11;\n        if (total === 10)\n            total = 0;\n        if (total === 11)\n            total = 1;\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        const expect = Number(vat.slice(7, 8));\n        return total === expect;\n    }\n    return false;\n}\nfunction isIndividualType1(vat, additional) {\n    if (additional[1].test(vat)) {\n        return Number(vat.slice(0, 2)) <= 62;\n    }\n    return false;\n}\nfunction isIndividualType2(vat, multipliers, additional, lookup) {\n    let total = 0;\n    if (additional[2].test(vat)) {\n        // Extract the next digit and multiply by the counter.\n        for (let j = 0; j < 7; j++) {\n            total += Number(vat.charAt(j + 1)) * multipliers[j];\n        }\n        // Establish check digit.\n        total = 11 - total % 11;\n        if (total === 10)\n            total = 0;\n        if (total === 11)\n            total = 1;\n        // Convert calculated check digit according to a lookup table\n        const expect = Number(vat.slice(8, 9));\n        if (!lookup)\n            return false;\n        return lookup[total - 1] === expect;\n    }\n    return false;\n}\nfunction isIndividualType3(vat, additional) {\n    if (additional[3].test(vat)) {\n        const temp = Number(vat.slice(0, 2)) + Number(vat.slice(2, 4)) + Number(vat.slice(4, 6)) + Number(vat.slice(6, 8)) + Number(vat.slice(8));\n        const expect = Number(vat) % 11 === 0;\n        return !!(temp % 11 === 0 && expect);\n    }\n    return false;\n}\n","export const denmark = {\n    name: 'Denmark',\n    codes: ['DK', 'DNK', '208'],\n    calcFn: (vat) => {\n        let total = 0;\n        for (let i = 0; i < 8; i++) {\n            total += Number(vat.charAt(i)) * denmark.rules.multipliers.common[i];\n        }\n        return total % 11 === 0;\n    },\n    rules: {\n        multipliers: {\n            common: [2, 7, 6, 5, 4, 3, 2, 1]\n        },\n        regex: [/^(DK)(\\d{8})$/]\n    }\n};\n","export const estonia = {\n    name: 'Estonia',\n    codes: ['EE', 'EST', '233'],\n    calcFn: (vat) => {\n        let total = 0;\n        let expect;\n        // Extract the next digit and multiply by the counter.\n        for (let i = 0; i < 8; i++) {\n            total += Number(vat.charAt(i)) * estonia.rules.multipliers.common[i];\n        }\n        // Establish check digits using modulus 10.\n        total = 10 - total % 10;\n        if (total === 10)\n            total = 0;\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = Number(vat.slice(8, 9));\n        return total === expect;\n    },\n    rules: {\n        multipliers: {\n            common: [3, 7, 1, 3, 7, 1, 3, 7]\n        },\n        regex: [/^(EE)(10\\d{7})$/]\n    }\n};\n","export const europe = {\n    name: 'Europe',\n    codes: ['EU', 'EUR', '000'],\n    calcFn: () => {\n        // We know little about EU numbers apart from the fact that the first 3 digits represent the\n        // country, and that there are nine digits in total.\n        return true;\n    },\n    rules: {\n        multipliers: {},\n        regex: [/^(EU)(\\d{9})$/]\n    }\n};\n","export const finland = {\n    name: 'Finland',\n    codes: ['FI', 'FIN', '246'],\n    calcFn: (vat) => {\n        let total = 0;\n        // Extract the next digit and multiply by the counter.\n        for (let i = 0; i < 7; i++)\n            total += Number(vat.charAt(i)) * finland.rules.multipliers.common[i];\n        // Establish check digit.\n        total = 11 - total % 11;\n        if (total > 9) {\n            total = 0;\n        }\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        const expect = Number(vat.slice(7, 8));\n        return total === expect;\n    },\n    rules: {\n        multipliers: {\n            common: [7, 9, 10, 5, 8, 4, 2]\n        },\n        regex: [/^(FI)(\\d{8})$/]\n    }\n};\n","export const france = {\n    name: 'France',\n    codes: ['FR', 'FRA', '250'],\n    calcFn: (vat) => {\n        let total;\n        // Checks the check digits of a French VAT number.\n        if (!(/^\\d{11}$/).test(vat))\n            return true;\n        // Extract the last nine digits as an integer.\n        total = Number(vat.substring(2));\n        // Establish check digit.\n        total = (total * 100 + 12) % 97;\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        const expect = Number(vat.slice(0, 2));\n        return total === expect;\n    },\n    rules: {\n        multipliers: {},\n        regex: [\n            /^(FR)(\\d{11})$/,\n            /^(FR)([A-HJ-NP-Z]\\d{10})$/,\n            /^(FR)(\\d[A-HJ-NP-Z]\\d{9})$/,\n            /^(FR)([A-HJ-NP-Z]{2}\\d{9})$/\n        ]\n    }\n};\n","export const germany = {\n    name: 'Germany',\n    codes: ['DE', 'DEU', '276'],\n    calcFn: (vat) => {\n        // Checks the check digits of a German VAT number.\n        let product = 10;\n        let sum = 0;\n        let checkDigit = 0;\n        let expect;\n        for (let i = 0; i < 8; i++) {\n            // Extract the next digit and implement peculiar algorithm!.\n            sum = (Number(vat.charAt(i)) + product) % 10;\n            if (sum === 0) {\n                sum = 10;\n            }\n            product = (2 * sum) % 11;\n        }\n        // Establish check digit.\n        if (11 - product === 10) {\n            checkDigit = 0;\n        }\n        else {\n            checkDigit = 11 - product;\n        }\n        // Compare it with the last two characters of the VAT number. If the same, then it is a valid\n        // check digit.\n        expect = Number(vat.slice(8, 9));\n        return checkDigit === expect;\n    },\n    rules: {\n        multipliers: {},\n        regex: [/^(DE)([1-9]\\d{8})$/]\n    }\n};\n","export const greece = {\n    name: 'Greece',\n    codes: ['GR', 'GRC', '300'],\n    calcFn: (vat) => {\n        let total = 0;\n        // eight character numbers should be prefixed with an 0.\n        const newVat = (vat.length === 8) ? '0' + vat : vat;\n        // Extract the next digit and multiply by the counter.\n        for (let i = 0; i < 8; i++) {\n            total += Number(newVat.charAt(i)) * greece.rules.multipliers.common[i];\n        }\n        // Establish check digit.\n        total = total % 11;\n        total = (total > 9) ? 0 : total;\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        const expect = Number(newVat.slice(8, 9));\n        return total === expect;\n    },\n    rules: {\n        multipliers: {\n            common: [256, 128, 64, 32, 16, 8, 4, 2]\n        },\n        regex: [/^(EL)(\\d{9})$/]\n    }\n};\n","export const hungary = {\n    name: 'Hungary',\n    codes: ['HU', 'HUN', '348'],\n    calcFn: (vat) => {\n        let total = 0;\n        // Extract the next digit and multiply by the counter.\n        for (let i = 0; i < 7; i++) {\n            total += Number(vat.charAt(i)) * hungary.rules.multipliers.common[i];\n        }\n        // Establish check digit.\n        total = 10 - total % 10;\n        if (total === 10)\n            total = 0;\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        const expect = Number(vat.slice(7, 8));\n        return total === expect;\n    },\n    rules: {\n        multipliers: {\n            common: [9, 7, 3, 1, 9, 7, 3]\n        },\n        regex: [/^(HU)(\\d{8})$/]\n    }\n};\n","export const ireland = {\n    name: 'Ireland',\n    codes: ['IE', 'IRL', '372'],\n    calcFn: (vat) => {\n        const { typeFormats, multipliers } = ireland.rules;\n        if (!typeFormats || !typeFormats.first)\n            return false;\n        let total = 0;\n        let newVat = vat;\n        // If the code is type 1 format, we need to convert it to the new before performing the validation.\n        if (typeFormats.first.test(vat)) {\n            newVat = '0' + vat.substring(2, 7) + vat.substring(0, 1) + vat.substring(7, 8);\n        }\n        // Extract the next digit and multiply by the counter.\n        for (let i = 0; i < 7; i++) {\n            total += Number(newVat.charAt(i)) * multipliers.common[i];\n        }\n        // If the number is type 3 then we need to include the trailing A or H in the calculation\n        if (typeFormats.third.test(newVat)) {\n            // Add in a multiplier for the character A (1*9=9) or H (8*9=72)\n            total += (newVat.charAt(8) === 'H') ? 72 : 9;\n        }\n        // Establish check digit using modulus 23, and translate to char. equivalent.\n        total = total % 23;\n        total = (total === 0) ? 'W' : String.fromCharCode(total + 64);\n        // Compare it with the eighth character of the VAT number. If it's the same, then it's valid.\n        const expect = newVat.slice(7, 8);\n        return total === expect;\n    },\n    rules: {\n        multipliers: {\n            common: [8, 7, 6, 5, 4, 3, 2]\n        },\n        typeFormats: {\n            first: /^\\d[A-Z*+]/,\n            third: /^\\d{7}[A-Z][AH]$/\n        },\n        regex: [\n            /^(IE)(\\d{7}[A-W])$/,\n            /^(IE)([7-9][A-Z*+)]\\d{5}[A-W])$/,\n            /^(IE)(\\d{7}[A-W][AH])$/\n        ]\n    }\n};\n","export const italy = {\n    name: 'Italy',\n    codes: ['IT', 'ITA', '380'],\n    calcFn: (vat) => {\n        let total = 0;\n        let temp;\n        // The last three digits are the issuing office, and cannot exceed more 201, unless 999 or 888\n        if (Number(vat.slice(0, 7)) === 0) {\n            return false;\n        }\n        temp = Number(vat.slice(7, 10));\n        if ((temp < 1) || (temp > 201) && temp !== 999 && temp !== 888) {\n            return false;\n        }\n        // Extract the next digit and multiply by the appropriate\n        for (let i = 0; i < 10; i++) {\n            temp = Number(vat.charAt(i)) * italy.rules.multipliers.common[i];\n            if (temp > 9)\n                total += Math.floor(temp / 10) + temp % 10;\n            else\n                total += temp;\n        }\n        // Establish check digit.\n        total = 10 - total % 10;\n        if (total > 9) {\n            total = 0;\n        }\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        const expect = Number(vat.slice(10, 11));\n        return total === expect;\n    },\n    rules: {\n        multipliers: {\n            common: [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n        },\n        regex: [/^(IT)(\\d{11})$/]\n    }\n};\n","export const latvia = {\n    name: 'Latvia',\n    codes: ['LV', 'LVA', '428'],\n    calcFn: (vat) => {\n        let total = 0;\n        // Differentiate between legal entities and natural bodies. For the latter we simply check that\n        // the first six digits correspond to valid DDMMYY dates.\n        if ((/^[0-3]/).test(vat)) {\n            return Boolean((/^[0-3][0-9][0-1][0-9]/).test(vat));\n        }\n        else {\n            // Extract the next digit and multiply by the counter.\n            for (let i = 0; i < 10; i++) {\n                total += Number(vat.charAt(i)) * latvia.rules.multipliers.common[i];\n            }\n            // Establish check digits by getting modulus 11.\n            if (total % 11 === 4 && Number(vat[0]) === 9)\n                total = total - 45;\n            if (total % 11 === 4) {\n                total = 4 - total % 11;\n            }\n            else if (total % 11 > 4) {\n                total = 14 - total % 11;\n            }\n            else if (total % 11 < 4) {\n                total = 3 - total % 11;\n            }\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            const expect = Number(vat.slice(10, 11));\n            return total === expect;\n        }\n    },\n    rules: {\n        multipliers: {\n            common: [9, 1, 4, 8, 3, 10, 2, 5, 7, 6]\n        },\n        regex: [/^(LV)(\\d{11})$/]\n    }\n};\n","export const lithuania = {\n    name: 'Lithuania',\n    codes: ['LT', 'LTU', '440'],\n    calcFn: (vat) => {\n        return _check9DigitVat(vat, lithuania.rules) || _check12DigitVat(vat, lithuania.rules);\n    },\n    rules: {\n        multipliers: {\n            short: [3, 4, 5, 6, 7, 8, 9, 1],\n            med: [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2],\n            alt: [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4]\n        },\n        check: /^\\d{10}1/,\n        regex: [/^(LT)(\\d{9}|\\d{12})$/]\n    }\n};\nfunction _extractDigit(vat, multiplierList, key) {\n    return Number(vat.charAt(key)) * multiplierList[key];\n}\nfunction _doubleCheckCalculation(vat, total, rules) {\n    let result = total;\n    if (result % 11 === 10) {\n        result = 0;\n        for (let i = 0; i < 8; i++) {\n            result += _extractDigit(vat, rules.multipliers.short, i);\n        }\n    }\n    return result;\n}\nfunction extractDigit(vat, total) {\n    let result = total;\n    for (let i = 0; i < 8; i++) {\n        result += Number(vat.charAt(i)) * (i + 1);\n    }\n    return result;\n}\nfunction checkDigit(total) {\n    let result = total % 11;\n    if (result === 10) {\n        result = 0;\n    }\n    return result;\n}\nfunction _check9DigitVat(vat, rules) {\n    // 9 character VAT numbers are for legal persons\n    let total = 0;\n    if (vat.length === 9) {\n        // 8th character must be one\n        if (!(/^\\d{7}1/).test(vat))\n            return false;\n        // Extract the next digit and multiply by the counter+1.\n        total = extractDigit(vat, total);\n        // Can have a double check digit calculation!\n        total = _doubleCheckCalculation(vat, total, rules);\n        // Establish check digit.\n        total = checkDigit(total);\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        const expect = Number(vat.slice(8, 9));\n        return total === expect;\n    }\n    return false;\n}\nfunction extractDigit12(vat, total, rules) {\n    let result = total;\n    for (let k = 0; k < 11; k++) {\n        result += _extractDigit(vat, rules.multipliers.med, k);\n    }\n    return result;\n}\nfunction _doubleCheckCalculation12(vat, total, rules) {\n    let result = total;\n    if (total % 11 === 10) {\n        result = 0;\n        for (let l = 0; l < 11; l++) {\n            result += _extractDigit(vat, rules.multipliers.alt, l);\n        }\n    }\n    return result;\n}\nfunction _check12DigitVat(vat, rules) {\n    let total = 0;\n    // 12 character VAT numbers are for temporarily registered taxpayers\n    if (vat.length === 12) {\n        if (!rules.check)\n            return false;\n        // 11th character must be one\n        if (!(rules.check).test(vat))\n            return false;\n        // Extract the next digit and multiply by the counter+1.\n        total = extractDigit12(vat, total, rules);\n        // Can have a double check digit calculation!\n        total = _doubleCheckCalculation12(vat, total, rules);\n        // Establish check digit.\n        total = checkDigit(total);\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        const expect = Number(vat.slice(11, 12));\n        return total === expect;\n    }\n    return false;\n}\n","export const luxembourg = {\n    name: 'Luxembourg',\n    codes: ['LU', 'LUX', '442'],\n    calcFn: (vat) => {\n        const expect = Number(vat.slice(6, 8));\n        const checkDigit = Number(vat.slice(0, 6)) % 89;\n        // Checks the check digits of a Luxembourg VAT number.\n        return checkDigit === expect;\n    },\n    rules: {\n        multipliers: {},\n        regex: [/^(LU)(\\d{8})$/]\n    }\n};\n","export const malta = {\n    name: 'Malta',\n    codes: ['MT', 'MLT', '470'],\n    calcFn: (vat) => {\n        let total = 0;\n        // Extract the next digit and multiply by the counter.\n        for (let i = 0; i < 6; i++) {\n            total += Number(vat.charAt(i)) * malta.rules.multipliers.common[i];\n        }\n        // Establish check digits by getting modulus 37.\n        total = 37 - total % 37;\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        const expect = Number(vat.slice(6, 8));\n        return total === expect;\n    },\n    rules: {\n        multipliers: {\n            common: [3, 4, 6, 7, 8, 9]\n        },\n        regex: [/^(MT)([1-9]\\d{7})$/]\n    }\n};\n","export const netherlands = {\n    name: 'Netherlands',\n    codes: ['NL', 'NLD', '528'],\n    calcFn: (input) => {\n        const vat = input.replace(/[\\ \\-\\_]/g, '').toUpperCase();\n        const { additional, multipliers } = netherlands.rules;\n        if (!additional)\n            return false;\n        const match = vat.match(additional[0]);\n        if (!match || !match[1])\n            return false;\n        const numb = match[1];\n        const characterValues = `NL${vat}`.split('').map(getCharValue);\n        let total = 0;\n        // Extract the next digit and multiply by the counter.\n        for (let i = 0; i < 8; i++) {\n            total += Number(numb.charAt(i)) * multipliers.common[i];\n        }\n        // Establish check digits by getting modulus 11.\n        total = total % 11;\n        if (total > 9) {\n            total = 0;\n        }\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        const expect = Number(numb.slice(8, 9));\n        // is either 11 proof or 97 mod proof.\n        return total === expect || isNinetySevenMod(characterValues.join(''));\n    },\n    rules: {\n        multipliers: {\n            common: [9, 8, 7, 6, 5, 4, 3, 2]\n        },\n        regex: [/^(NL)(\\d{9}B\\d{2})$/],\n        additional: [/^(\\d{9})B\\d{2}$/]\n    }\n};\nfunction getCharValue(char) {\n    // if one of these set values\n    if (char === '+')\n        return 36;\n    if (char === '*')\n        return 37;\n    // if A...Z return code VAL -55\n    const code = char.charCodeAt(0) - 55;\n    if (code > 9 && code < 91)\n        return code;\n    return parseInt(char, 10);\n}\nfunction isNinetySevenMod(value) {\n    return BigInt(value) % BigInt(97) === BigInt(1);\n}\n","export const norway = {\n    name: 'Norway',\n    codes: ['NO', 'NOR', '578'],\n    calcFn: (vat) => {\n        let total = 0;\n        // See http://www.brreg.no/english/coordination/number.html\n        // Extract the next digit and multiply by the counter.\n        for (let i = 0; i < 8; i++) {\n            total += Number(vat.charAt(i)) * norway.rules.multipliers.common[i];\n        }\n        // Establish check digits by getting modulus 11. Check digits > 9 are invalid\n        total = 11 - total % 11;\n        if (total === 11) {\n            total = 0;\n        }\n        if (total < 10) {\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            const expect = Number(vat.slice(8, 9));\n            return total === expect;\n        }\n        return false;\n    },\n    rules: {\n        multipliers: {\n            common: [3, 2, 7, 6, 5, 4, 3, 2]\n        },\n        regex: [/^(NO)(\\d{9})$/]\n    }\n};\n","export const poland = {\n    name: 'Poland',\n    codes: ['PL', 'POL', '616'],\n    calcFn: (vat) => {\n        let total = 0;\n        // Extract the next digit and multiply by the counter.\n        for (let i = 0; i < 9; i++) {\n            total += Number(vat.charAt(i)) * poland.rules.multipliers.common[i];\n        }\n        // Establish check digits subtracting modulus 11 from 11.\n        total = total % 11;\n        if (total > 9) {\n            total = 0;\n        }\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        const expect = Number(vat.slice(9, 10));\n        return total === expect;\n    },\n    rules: {\n        multipliers: {\n            common: [6, 5, 7, 2, 3, 4, 5, 6, 7]\n        },\n        regex: [/^(PL)(\\d{10})$/]\n    }\n};\n","export const portugal = {\n    name: 'Portugal',\n    codes: ['PT', 'PRT', '620'],\n    calcFn: (vat) => {\n        let total = 0;\n        // Extract the next digit and multiply by the counter.\n        for (let i = 0; i < 8; i++) {\n            total += Number(vat.charAt(i)) * portugal.rules.multipliers.common[i];\n        }\n        // Establish check digits subtracting modulus 11 from 11.\n        total = 11 - total % 11;\n        if (total > 9) {\n            total = 0;\n        }\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        const expect = Number(vat.slice(8, 9));\n        return total === expect;\n    },\n    rules: {\n        multipliers: {\n            common: [9, 8, 7, 6, 5, 4, 3, 2]\n        },\n        regex: [/^(PT)(\\d{9})$/]\n    }\n};\n","export const romania = {\n    name: 'Romania',\n    codes: ['RO', 'ROU', '642'],\n    calcFn: (vat) => {\n        let total = 0;\n        // Extract the next digit and multiply by the counter.\n        const vatLength = vat.length;\n        const multipliers = romania.rules.multipliers.common.slice(10 - vatLength);\n        for (let i = 0; i < vat.length - 1; i++) {\n            total += Number(vat.charAt(i)) * multipliers[i];\n        }\n        // Establish check digits by getting modulus 11.\n        total = (10 * total) % 11;\n        if (total === 10)\n            total = 0;\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        const expect = Number(vat.slice(vat.length - 1, vat.length));\n        return total === expect;\n    },\n    rules: {\n        multipliers: {\n            common: [7, 5, 3, 2, 1, 7, 5, 3, 2]\n        },\n        regex: [/^(RO)([1-9]\\d{1,9})$/]\n    }\n};\n","export const russia = {\n    name: 'Russian Federation',\n    codes: ['RU', 'RUS', '643'],\n    calcFn: (vat) => {\n        // See http://russianpartner.biz/test_inn.html for algorithm\n        return _check10DigitINN(vat, russia.rules) || _check12DigitINN(vat, russia.rules);\n    },\n    rules: {\n        multipliers: {\n            m_1: [2, 4, 10, 3, 5, 9, 4, 6, 8, 0],\n            m_2: [7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0],\n            m_3: [3, 7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0]\n        },\n        regex: [/^(RU)(\\d{10}|\\d{12})$/]\n    }\n};\nfunction _check10DigitINN(vat, rules) {\n    let total = 0;\n    if (vat.length === 10) {\n        for (let i = 0; i < 10; i++) {\n            total += Number(vat.charAt(i)) * rules.multipliers.m_1[i];\n        }\n        total = total % 11;\n        if (total > 9) {\n            total = total % 10;\n        }\n        // Compare it with the last character of the VAT number. If it is the same, then it's valid\n        const expect = Number(vat.slice(9, 10));\n        return total === expect;\n    }\n    return false;\n}\nfunction _check12DigitINN(vat, rules) {\n    let total1 = 0;\n    let total2 = 0;\n    if (vat.length === 12) {\n        for (let j = 0; j < 11; j++) {\n            total1 += Number(vat.charAt(j)) * rules.multipliers.m_2[j];\n        }\n        total1 = total1 % 11;\n        if (total1 > 9) {\n            total1 = total1 % 10;\n        }\n        for (let k = 0; k < 11; k++) {\n            total2 += Number(vat.charAt(k)) * rules.multipliers.m_3[k];\n        }\n        total2 = total2 % 11;\n        if (total2 > 9) {\n            total2 = total2 % 10;\n        }\n        // Compare the first check with the 11th character and the second check with the 12th and last\n        // character of the VAT number. If they're both the same, then it's valid\n        const expect = (total1 === Number(vat.slice(10, 11)));\n        const expect2 = (total2 === Number(vat.slice(11, 12)));\n        return (expect) && (expect2);\n    }\n    return false;\n}\n","export const serbia = {\n    name: 'Serbia',\n    codes: ['RS', 'SRB', '688'],\n    calcFn: (vat) => {\n        // Checks the check digits of a Serbian VAT number using ISO 7064, MOD 11-10 for check digit.\n        let product = 10;\n        let sum = 0;\n        for (let i = 0; i < 8; i++) {\n            // Extract the next digit and implement the algorithm\n            sum = (Number(vat.charAt(i)) + product) % 10;\n            if (sum === 0) {\n                sum = 10;\n            }\n            product = (2 * sum) % 11;\n        }\n        // Now check that we have the right check digit\n        const expect = 1;\n        const checkDigit = (product + (Number(vat.slice(8, 9)))) % 10;\n        return checkDigit === expect;\n    },\n    rules: {\n        multipliers: {},\n        regex: [/^(RS)(\\d{9})$/]\n    }\n};\n","export const slovakiaRepublic = {\n    name: 'Slovakia Republic',\n    codes: ['SK', 'SVK', '703'],\n    calcFn: (vat) => {\n        const expect = 0;\n        const checkDigit = (Number(vat) % 11);\n        return checkDigit === expect;\n    },\n    rules: {\n        multipliers: {},\n        regex: [/^(SK)([1-9]\\d[2346-9]\\d{7})$/]\n    }\n};\n","export const slovenia = {\n    name: 'Slovenia',\n    codes: ['SI', 'SVN', '705'],\n    calcFn: (vat) => {\n        let total = 0;\n        // Extract the next digit and multiply by the counter.\n        for (let i = 0; i < 7; i++) {\n            total += Number(vat.charAt(i)) * slovenia.rules.multipliers.common[i];\n        }\n        // Establish check digits using modulus 11\n        total = 11 - total % 11;\n        if (total === 10) {\n            total = 0;\n        }\n        // Compare the number with the last character of the VAT number. If it is the\n        // same, then it's a valid check digit.\n        const expect = Number(vat.slice(7, 8));\n        return !!(total !== 11 && total === expect);\n    },\n    rules: {\n        multipliers: {\n            common: [8, 7, 6, 5, 4, 3, 2]\n        },\n        regex: [/^(SI)([1-9]\\d{7})$/]\n    }\n};\n","export const spain = {\n    name: 'Spain',\n    codes: ['ES', 'ESP', '724'],\n    calcFn: (vat) => {\n        const { additional, multipliers } = spain.rules;\n        if (!additional)\n            return false;\n        // National juridical entities\n        if (additional[0].test(vat))\n            return isNationalJuridicalEntities(vat, multipliers.common);\n        // Juridical entities other than national ones\n        if (additional[1].test(vat))\n            return isNonNationalJuridical(vat, multipliers.common);\n        // Personal number (NIF) (starting with numeric of Y or Z)\n        if (additional[2].test(vat))\n            return isPersonalYtoZ(vat);\n        // Personal number (NIF) (starting with K, L, M, or X)\n        if (additional[3].test(vat))\n            return isPersonalKtoX(vat);\n        return false;\n    },\n    rules: {\n        multipliers: {\n            common: [2, 1, 2, 1, 2, 1, 2]\n        },\n        regex: [\n            /^(ES)([A-Z]\\d{8})$/,\n            /^(ES)([A-HN-SW]\\d{7}[A-J])$/,\n            /^(ES)([0-9YZ]\\d{7}[A-Z])$/,\n            /^(ES)([KLMX]\\d{7}[A-Z])$/\n        ],\n        additional: [\n            /^[A-H|J|U|V]\\d{8}$/,\n            /^[A-H|N-S|W]\\d{7}[A-J]$/,\n            /^[0-9|Y|Z]\\d{7}[A-Z]$/,\n            /^[K|L|M|X]\\d{7}[A-Z]$/\n        ]\n    }\n};\nfunction extractDigitAndMultiplyByCounter(vat, multipliers, total) {\n    let temp;\n    let result = total;\n    for (let i = 0; i < 7; i++) {\n        temp = Number(vat.charAt(i + 1)) * multipliers[i];\n        if (temp > 9) {\n            result += Math.floor(temp / 10) + temp % 10;\n        }\n        else {\n            result += temp;\n        }\n    }\n    return result;\n}\nfunction isNationalJuridicalEntities(vat, multipliers) {\n    let total = extractDigitAndMultiplyByCounter(vat, multipliers, 0);\n    // Now calculate the check digit itself.\n    total = 10 - total % 10;\n    if (total === 10) {\n        total = 0;\n    }\n    // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n    const expect = Number(vat.slice(8, 9));\n    return total === expect;\n}\nfunction isNonNationalJuridical(vat, multipliers) {\n    let total = extractDigitAndMultiplyByCounter(vat, multipliers, 0);\n    // Now calculate the check digit itself.\n    total = 10 - total % 10;\n    const totalStr = String.fromCharCode(total + 64);\n    // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n    const expect = vat.slice(8, 9);\n    return totalStr === expect;\n}\nfunction isPersonalYtoZ(vat) {\n    let tempNumber = vat;\n    if (tempNumber.substring(0, 1) === 'Y')\n        tempNumber = tempNumber.replace(/Y/, '1');\n    if (tempNumber.substring(0, 1) === 'Z')\n        tempNumber = tempNumber.replace(/Z/, '2');\n    const expect = 'TRWAGMYFPDXBNJZSQVHLCKE'.charAt(+tempNumber.substring(0, 8) % 23);\n    return tempNumber.charAt(8) === expect;\n}\nfunction isPersonalKtoX(vat) {\n    const expect = 'TRWAGMYFPDXBNJZSQVHLCKE'.charAt(Number(vat.substring(1, 8)) % 23);\n    return vat.charAt(8) === expect;\n}\n","export const sweden = {\n    name: 'Sweden',\n    codes: ['SE', 'SWE', '752'],\n    calcFn: (vat) => {\n        let expect;\n        // Calculate R where R = R1 + R3 + R5 + R7 + R9, and Ri = INT(Ci/5) + (Ci*2) modulo 10\n        let R = 0;\n        for (let i = 0; i < 9; i = i + 2) {\n            const digit = Number(vat.charAt(i));\n            R += Math.floor(digit / 5) + ((digit * 2) % 10);\n        }\n        // Calculate S where S = C2 + C4 + C6 + C8\n        let S = 0;\n        for (let j = 1; j < 9; j = j + 2) {\n            S += Number(vat.charAt(j));\n        }\n        const checkDigit = (10 - (R + S) % 10) % 10;\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = Number(vat.slice(9, 10));\n        return checkDigit === expect;\n    },\n    rules: {\n        multipliers: {},\n        regex: [/^(SE)(\\d{10}01)$/]\n    }\n};\n","export const switzerland = {\n    name: 'Switzerland',\n    codes: ['CH', 'CHE', '756'],\n    calcFn: (vat) => {\n        let total = 0;\n        for (let i = 0; i < 8; i++) {\n            total += Number(vat.charAt(i)) * switzerland.rules.multipliers.common[i];\n        }\n        // Establish check digit.s\n        total = 11 - total % 11;\n        if (total === 10)\n            return false;\n        if (total === 11)\n            total = 0;\n        // Check to see if the check digit given is correct, If not, we have an error with the VAT number\n        const expect = Number(vat.substr(8, 1));\n        return total === expect;\n    },\n    rules: {\n        multipliers: {\n            common: [5, 4, 3, 2, 7, 6, 5, 4]\n        },\n        regex: [/^(CHE)(\\d{9})(MWST|TVA|IVA)?$/]\n    }\n};\n","export const unitedKingdom = {\n    name: 'United Kingdom',\n    codes: ['GB', 'GBR', '826'],\n    calcFn: (vat) => {\n        // Government departments\n        if (vat.substr(0, 2) === 'GD')\n            return isGovernmentDepartment(vat);\n        // Health authorities\n        if (vat.substr(0, 2) === 'HA')\n            return isHealthAuthorities(vat);\n        // Standard and commercial numbers\n        return isStandardOrCommercialNumber(vat, unitedKingdom.rules.multipliers.common);\n    },\n    rules: {\n        multipliers: {\n            common: [8, 7, 6, 5, 4, 3, 2]\n        },\n        regex: [\n            /^(GB)?(\\d{9})$/,\n            /^(GB)?(\\d{12})$/,\n            /^(GB)?(GD\\d{3})$/,\n            /^(GB)?(HA\\d{3})$/\n        ]\n    }\n};\nfunction isGovernmentDepartment(vat) {\n    const expect = 500;\n    return Number(vat.substr(2, 3)) < expect;\n}\nfunction isHealthAuthorities(vat) {\n    const expect = 499;\n    return Number(vat.substr(2, 3)) > expect;\n}\nfunction isStandardOrCommercialNumber(vat, multipliers) {\n    let total = 0;\n    // 0 VAT numbers disallowed!\n    if (Number(vat.slice(0)) === 0)\n        return false;\n    // Check range is OK for modulus 97 calculation\n    const no = Number(vat.slice(0, 7));\n    // Extract the next digit and multiply by the counter.\n    for (let i = 0; i < 7; i++) {\n        total += Number(vat.charAt(i)) * multipliers[i];\n    }\n    // Old numbers use a simple 97 modulus, but new numbers use an adaptation of that (less 55). Our\n    // VAT number could use either system, so we check it against both.\n    // Establish check digits by subtracting 97 from total until negative.\n    let checkDigit = total;\n    while (checkDigit > 0) {\n        checkDigit = checkDigit - 97;\n    }\n    // Get the absolute value and compare it with the last two characters of the VAT number. If the\n    // same, then it is a valid traditional check digit. However, even then the number must fit within\n    // certain specified ranges.\n    checkDigit = Math.abs(checkDigit);\n    if (checkDigit === Number(vat.slice(7, 9)) && no < 9990001 && (no < 100000 || no > 999999) && (no < 9490001 || no > 9700000))\n        return true;\n    // Now try the new method by subtracting 55 from the check digit if we can - else add 42\n    if (checkDigit >= 55) {\n        checkDigit = checkDigit - 55;\n    }\n    else {\n        checkDigit = checkDigit + 42;\n    }\n    const expect = Number(vat.slice(7, 9));\n    return Boolean(checkDigit === expect && no > 1000000);\n}\n","export { austria } from './austria';\nexport { belgium } from './belgium';\nexport { bulgaria } from './bulgaria';\nexport { croatia } from './croatiat';\nexport { cyprus } from './cyprus';\nexport { czechRepublic } from './czechRepublic';\nexport { denmark } from './denmark';\nexport { estonia } from './estonia';\nexport { europe } from './europe';\nexport { finland } from './finland';\nexport { france } from './france';\nexport { germany } from './germany';\nexport { greece } from './greece';\nexport { hungary } from './hungary';\nexport { ireland } from './ireland';\nexport { italy } from './italy';\nexport { latvia } from './latvia';\nexport { lithuania } from './lithuania';\nexport { luxembourg } from './luxembourg';\nexport { malta } from './malta';\nexport { netherlands } from './netherlands';\nexport { norway } from './norway';\nexport { poland } from './poland';\nexport { portugal } from './portugal';\nexport { romania } from './romania';\nexport { russia } from './russia';\nexport { serbia } from './serbia';\nexport { slovakiaRepublic } from './slovakiaRepublic';\nexport { slovenia } from './slovenia';\nexport { spain } from './spain';\nexport { sweden } from './sweden';\nexport { switzerland } from './switzerland';\nexport { unitedKingdom } from './unitedKingdom';\n","function makeResult(vat, isValid, country) {\n    return {\n        value: vat || undefined,\n        isValid: Boolean(isValid),\n        country: (!country) ? undefined : {\n            name: country.name,\n            isoCode: {\n                short: country.codes[0],\n                long: country.codes[1],\n                numeric: country.codes[2]\n            }\n        }\n    };\n}\nfunction removeExtraChars(vat = '') {\n    return vat.toString().toUpperCase().replace(/(\\s|-|\\.)+/g, '');\n}\nfunction getCountry(vat, countriesList) {\n    for (const country of countriesList) {\n        const regexpValidRes = isVatValidToRegexp(vat, country.rules.regex);\n        if (regexpValidRes.isValid)\n            return country;\n    }\n    return undefined;\n}\nfunction isVatValidToRegexp(vat, regexArr) {\n    for (const regex of regexArr) {\n        const isValid = regex.test(vat);\n        if (isValid)\n            return { isValid: true, regex: regex };\n    }\n    return { isValid: false, regex: undefined };\n}\nfunction isVatValid(vat, country) {\n    const regexpValidRes = isVatValidToRegexp(vat, country.rules.regex);\n    if (!regexpValidRes.isValid || !regexpValidRes.regex)\n        return false;\n    const regexResult = regexpValidRes.regex.exec(vat);\n    if (!regexResult)\n        return false;\n    return country.calcFn(regexResult[2]);\n}\nexport function checkVAT(vat, countriesList = []) {\n    if (!vat)\n        return makeResult(vat, false);\n    const cleanVAT = removeExtraChars(vat);\n    const result = makeResult(cleanVAT);\n    const country = getCountry(cleanVAT, countriesList);\n    if (!country)\n        return result;\n    const isValid = isVatValid(cleanVAT, country);\n    if (isValid)\n        return makeResult(cleanVAT, isValid, country);\n    return result;\n}\n","import { austria, belgium, bulgaria, croatia, cyprus, czechRepublic, denmark, estonia, europe, finland, france, germany, greece, hungary, ireland, italy, latvia, lithuania, luxembourg, malta, netherlands, norway, poland, portugal, romania, russia, serbia, slovakiaRepublic, slovenia, spain, sweden, switzerland, unitedKingdom } from './lib/countries';\nconst countries = [\n    austria,\n    belgium,\n    bulgaria,\n    croatia,\n    cyprus,\n    czechRepublic,\n    denmark,\n    estonia,\n    europe,\n    finland,\n    france,\n    germany,\n    greece,\n    hungary,\n    ireland,\n    italy,\n    latvia,\n    lithuania,\n    luxembourg,\n    malta,\n    netherlands,\n    norway,\n    poland,\n    portugal,\n    romania,\n    russia,\n    serbia,\n    slovakiaRepublic,\n    slovenia,\n    spain,\n    sweden,\n    switzerland,\n    unitedKingdom\n];\nexport { countries };\nexport { austria, belgium, bulgaria, croatia, cyprus, czechRepublic, denmark, estonia, europe, finland, france, germany, greece, hungary, ireland, italy, latvia, lithuania, luxembourg, malta, netherlands, norway, poland, portugal, romania, russia, serbia, slovakiaRepublic, slovenia, spain, sweden, switzerland, unitedKingdom } from './lib/countries';\nexport { checkVAT } from './lib/jsvat';\n","var isSymbol = require('./isSymbol');\n\n/**\n * The base implementation of methods like `_.max` and `_.min` which accepts a\n * `comparator` to determine the extremum value.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee invoked per iteration.\n * @param {Function} comparator The comparator used to compare values.\n * @returns {*} Returns the extremum value.\n */\nfunction baseExtremum(array, iteratee, comparator) {\n  var index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var value = array[index],\n        current = iteratee(value);\n\n    if (current != null && (computed === undefined\n          ? (current === current && !isSymbol(current))\n          : comparator(current, computed)\n        )) {\n      var computed = current,\n          result = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseExtremum;\n","var baseIteratee = require('./_baseIteratee'),\n    isArrayLike = require('./isArrayLike'),\n    keys = require('./keys');\n\n/**\n * Creates a `_.find` or `_.findLast` function.\n *\n * @private\n * @param {Function} findIndexFunc The function to find the collection index.\n * @returns {Function} Returns the new find function.\n */\nfunction createFind(findIndexFunc) {\n  return function(collection, predicate, fromIndex) {\n    var iterable = Object(collection);\n    if (!isArrayLike(collection)) {\n      var iteratee = baseIteratee(predicate, 3);\n      collection = keys(collection);\n      predicate = function(key) { return iteratee(iterable[key], key, iterable); };\n    }\n    var index = findIndexFunc(collection, predicate, fromIndex);\n    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\n  };\n}\n\nmodule.exports = createFind;\n","var createFind = require('./_createFind'),\n    findIndex = require('./findIndex');\n\n/**\n * Iterates over elements of `collection`, returning the first element\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {*} Returns the matched element, else `undefined`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'age': 36, 'active': true },\n *   { 'user': 'fred',    'age': 40, 'active': false },\n *   { 'user': 'pebbles', 'age': 1,  'active': true }\n * ];\n *\n * _.find(users, function(o) { return o.age < 40; });\n * // => object for 'barney'\n *\n * // The `_.matches` iteratee shorthand.\n * _.find(users, { 'age': 1, 'active': true });\n * // => object for 'pebbles'\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.find(users, ['active', false]);\n * // => object for 'fred'\n *\n * // The `_.property` iteratee shorthand.\n * _.find(users, 'active');\n * // => object for 'barney'\n */\nvar find = createFind(findIndex);\n\nmodule.exports = find;\n","var baseFindIndex = require('./_baseFindIndex'),\n    baseIteratee = require('./_baseIteratee'),\n    toInteger = require('./toInteger');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * This method is like `_.find` except that it returns the index of the first\n * element `predicate` returns truthy for instead of the element itself.\n *\n * @static\n * @memberOf _\n * @since 1.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {number} Returns the index of the found element, else `-1`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'active': false },\n *   { 'user': 'fred',    'active': false },\n *   { 'user': 'pebbles', 'active': true }\n * ];\n *\n * _.findIndex(users, function(o) { return o.user == 'barney'; });\n * // => 0\n *\n * // The `_.matches` iteratee shorthand.\n * _.findIndex(users, { 'user': 'fred', 'active': false });\n * // => 1\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.findIndex(users, ['active', false]);\n * // => 0\n *\n * // The `_.property` iteratee shorthand.\n * _.findIndex(users, 'active');\n * // => 2\n */\nfunction findIndex(array, predicate, fromIndex) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return -1;\n  }\n  var index = fromIndex == null ? 0 : toInteger(fromIndex);\n  if (index < 0) {\n    index = nativeMax(length + index, 0);\n  }\n  return baseFindIndex(array, baseIteratee(predicate, 3), index);\n}\n\nmodule.exports = findIndex;\n","var baseFindIndex = require('./_baseFindIndex'),\n    baseIteratee = require('./_baseIteratee'),\n    toInteger = require('./toInteger');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * This method is like `_.findIndex` except that it iterates over elements\n * of `collection` from right to left.\n *\n * @static\n * @memberOf _\n * @since 2.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=array.length-1] The index to search from.\n * @returns {number} Returns the index of the found element, else `-1`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'active': true },\n *   { 'user': 'fred',    'active': false },\n *   { 'user': 'pebbles', 'active': false }\n * ];\n *\n * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });\n * // => 2\n *\n * // The `_.matches` iteratee shorthand.\n * _.findLastIndex(users, { 'user': 'barney', 'active': true });\n * // => 0\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.findLastIndex(users, ['active', false]);\n * // => 2\n *\n * // The `_.property` iteratee shorthand.\n * _.findLastIndex(users, 'active');\n * // => 0\n */\nfunction findLastIndex(array, predicate, fromIndex) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return -1;\n  }\n  var index = length - 1;\n  if (fromIndex !== undefined) {\n    index = toInteger(fromIndex);\n    index = fromIndex < 0\n      ? nativeMax(length + index, 0)\n      : nativeMin(index, length - 1);\n  }\n  return baseFindIndex(array, baseIteratee(predicate, 3), index, true);\n}\n\nmodule.exports = findLastIndex;\n","/*!\n * VATRates v2.0.3\n * MIT License\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"VATRates\"] = factory();\n\telse\n\t\troot[\"VATRates\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 4);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\nmodule.exports = {\"rates\":[{\"name\":\"Austria\",\"code\":\"AT\",\"countryCode\":\"AT\",\"periods\":[{\"effectiveFrom\":\"2016-01-01\",\"rates\":{\"reduced\":[10,13],\"standard\":20,\"parking\":13}},{\"effectiveFrom\":\"0000-01-01\",\"rates\":{\"reduced\":[10],\"standard\":20,\"parking\":12}}]},{\"name\":\"Belgium\",\"code\":\"BE\",\"countryCode\":\"BE\",\"periods\":[{\"effectiveFrom\":\"0000-01-01\",\"rates\":{\"reduced\":[6,12],\"standard\":21,\"parking\":12}}]},{\"name\":\"Bulgaria\",\"code\":\"BG\",\"countryCode\":\"BG\",\"periods\":[{\"effectiveFrom\":\"0000-01-01\",\"rates\":{\"reduced\":[9],\"standard\":20}}]},{\"name\":\"Croatia\",\"code\":\"HR\",\"countryCode\":\"HR\",\"periods\":[{\"effectiveFrom\":\"0000-01-01\",\"rates\":{\"reduced\":[5,13],\"standard\":25}}]},{\"name\":\"Cyprus\",\"code\":\"CY\",\"countryCode\":\"CY\",\"periods\":[{\"effectiveFrom\":\"0000-01-01\",\"rates\":{\"reduced\":[5,9],\"standard\":19}}]},{\"name\":\"Czech Republic\",\"code\":\"CZ\",\"countryCode\":\"CZ\",\"periods\":[{\"effectiveFrom\":\"0000-01-01\",\"rates\":{\"reduced\":[10,15],\"standard\":21}}]},{\"name\":\"Denmark\",\"code\":\"DK\",\"countryCode\":\"DK\",\"periods\":[{\"effectiveFrom\":\"0000-01-01\",\"rates\":{\"standard\":25}}]},{\"name\":\"Estonia\",\"code\":\"EE\",\"countryCode\":\"EE\",\"periods\":[{\"effectiveFrom\":\"0000-01-01\",\"rates\":{\"reduced\":[9],\"standard\":20}}]},{\"name\":\"Germany\",\"code\":\"DE\",\"countryCode\":\"DE\",\"periods\":[{\"effectiveFrom\":\"2021-01-01\",\"rates\":{\"reduced\":[7],\"standard\":19}},{\"effectiveFrom\":\"2020-07-01\",\"rates\":{\"reduced\":[5],\"standard\":16}},{\"effectiveFrom\":\"2007-01-01\",\"rates\":{\"reduced\":[7],\"standard\":19}},{\"effectiveFrom\":\"0000-01-01\",\"rates\":{\"reduced\":[7],\"standard\":16}}]},{\"name\":\"Greece\",\"code\":\"EL\",\"countryCode\":\"GR\",\"periods\":[{\"effectiveFrom\":\"2016-06-01\",\"rates\":{\"reduced\":[6,13],\"standard\":24}},{\"effectiveFrom\":\"2015-01-01\",\"rates\":{\"reduced\":[6,13],\"standard\":23}},{\"effectiveFrom\":\"0000-01-01\",\"rates\":{\"reduced\":[6.5,13],\"standard\":23}}]},{\"name\":\"Finland\",\"code\":\"FI\",\"countryCode\":\"FI\",\"periods\":[{\"effectiveFrom\":\"0000-01-01\",\"rates\":{\"reduced\":[10,14],\"standard\":24}}]},{\"name\":\"France\",\"code\":\"FR\",\"countryCode\":\"FR\",\"periods\":[{\"effectiveFrom\":\"0000-01-01\",\"rates\":{\"superReduced\":2.1,\"reduced\":[5.5,10],\"standard\":20}}]},{\"name\":\"Hungary\",\"code\":\"HU\",\"countryCode\":\"HU\",\"periods\":[{\"effectiveFrom\":\"0000-01-01\",\"rates\":{\"reduced\":[5,18],\"standard\":27}}]},{\"name\":\"Ireland\",\"code\":\"IE\",\"countryCode\":\"IE\",\"periods\":[{\"effectiveFrom\":\"0000-01-01\",\"rates\":{\"superReduced\":4.8,\"reduced\":[9,13.5],\"standard\":23,\"parking\":13.5}}]},{\"name\":\"Italy\",\"code\":\"IT\",\"countryCode\":\"IT\",\"periods\":[{\"effectiveFrom\":\"0000-01-01\",\"rates\":{\"superReduced\":4,\"reduced\":[5,10],\"standard\":22}}]},{\"name\":\"Latvia\",\"code\":\"LV\",\"countryCode\":\"LV\",\"periods\":[{\"effectiveFrom\":\"2018-01-01\",\"rates\":{\"superReduced\":5,\"reduced\":[12],\"standard\":21}},{\"effectiveFrom\":\"0000-01-01\",\"rates\":{\"reduced\":[12],\"standard\":21}}]},{\"name\":\"Lithuania\",\"code\":\"LT\",\"countryCode\":\"LT\",\"periods\":[{\"effectiveFrom\":\"0000-01-01\",\"rates\":{\"reduced\":[5,9],\"standard\":21}}]},{\"name\":\"Luxembourg\",\"code\":\"LU\",\"countryCode\":\"LU\",\"periods\":[{\"effectiveFrom\":\"2016-01-01\",\"rates\":{\"superReduced\":3,\"reduced\":[8],\"standard\":17,\"parking\":14}},{\"effectiveFrom\":\"2015-01-01\",\"rates\":{\"superReduced\":3,\"reduced\":[8,14],\"standard\":17,\"parking\":12}},{\"effectiveFrom\":\"0000-01-01\",\"rates\":{\"superReduced\":3,\"reduced\":[6,12],\"standard\":15,\"parking\":12}}]},{\"name\":\"Malta\",\"code\":\"MT\",\"countryCode\":\"MT\",\"periods\":[{\"effectiveFrom\":\"0000-01-01\",\"rates\":{\"reduced\":[5,7],\"standard\":18}}]},{\"name\":\"Netherlands\",\"code\":\"NL\",\"countryCode\":\"NL\",\"periods\":[{\"effectiveFrom\":\"2019-01-01\",\"rates\":{\"reduced\":[9],\"standard\":21}},{\"effectiveFrom\":\"2012-01-01\",\"rates\":{\"reduced\":[6],\"standard\":21}},{\"effectiveFrom\":\"0000-01-01\",\"rates\":{\"reduced\":[6],\"standard\":19}}]},{\"name\":\"Poland\",\"code\":\"PL\",\"countryCode\":\"PL\",\"periods\":[{\"effectiveFrom\":\"0000-01-01\",\"rates\":{\"reduced\":[5,8],\"standard\":23}}]},{\"name\":\"Portugal\",\"code\":\"PT\",\"countryCode\":\"PT\",\"periods\":[{\"effectiveFrom\":\"0000-01-01\",\"rates\":{\"reduced\":[6,13],\"standard\":23,\"parking\":13}}]},{\"name\":\"Romania\",\"code\":\"RO\",\"countryCode\":\"RO\",\"periods\":[{\"effectiveFrom\":\"2017-01-01\",\"rates\":{\"reduced\":[5,9],\"standard\":19}},{\"effectiveFrom\":\"2016-01-01\",\"rates\":{\"reduced\":[5,9],\"standard\":20}},{\"effectiveFrom\":\"0000-01-01\",\"rates\":{\"reduced\":[5,9],\"standard\":24}}]},{\"name\":\"Slovakia\",\"code\":\"SK\",\"countryCode\":\"SK\",\"periods\":[{\"effectiveFrom\":\"0000-01-01\",\"rates\":{\"reduced\":[10],\"standard\":20}}]},{\"name\":\"Slovenia\",\"code\":\"SI\",\"countryCode\":\"SI\",\"periods\":[{\"effectiveFrom\":\"0000-01-01\",\"rates\":{\"reduced\":[9.5],\"standard\":22}}]},{\"name\":\"Spain\",\"code\":\"ES\",\"countryCode\":\"ES\",\"periods\":[{\"effectiveFrom\":\"0000-01-01\",\"rates\":{\"superReduced\":4,\"reduced\":[10],\"standard\":21}}]},{\"name\":\"Sweden\",\"code\":\"SE\",\"countryCode\":\"SE\",\"periods\":[{\"effectiveFrom\":\"0000-01-01\",\"rates\":{\"reduced\":[6,12],\"standard\":25}}]},{\"name\":\"United Kingdom\",\"code\":\"UK\",\"countryCode\":\"GB\",\"periods\":[{\"effectiveFrom\":\"2011-01-04\",\"rates\":{\"reduced\":[5],\"standard\":20}},{\"effectiveFrom\":\"2010-01-01\",\"rates\":{\"reduced\":[5],\"standard\":17.5}},{\"effectiveFrom\":\"2008-12-01\",\"rates\":{\"reduced\":[5],\"standard\":15}},{\"effectiveFrom\":\"1991-03-19\",\"rates\":{\"reduced\":[8],\"standard\":17.5}},{\"effectiveFrom\":\"0000-01-01\",\"rates\":{\"reduced\":[8],\"standard\":15}}]}]}\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar VATPeriod = __webpack_require__(3);\nvar VATCountry = __webpack_require__(2);\nvar json = __webpack_require__(0);\n\nvar VATCountries = [];\n\nif (json && json.rates) {\n  json.rates.forEach(function (country) {\n    var periods = [];\n\n    if (country.periods) {\n      country.periods.forEach(function (period) {\n        periods.push(new VATPeriod(new Date(period.effectiveFrom), period.rates.superReduced, period.rates.reduced, period.rates.standard, period.rates.parking));\n      });\n    }\n\n    VATCountries.push(new VATCountry(country.name, country.code, country.countryCode, periods));\n  });\n}\n\nmodule.exports = VATCountries;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n/**\n * VATCountry\n *\n * @param {string} name\n * @param {string} code\n * @param {string} countryCode\n * @param {VATPeriod[]} periods\n * @param {Date} [date]\n */\nfunction VATCountry(name, code, countryCode, periods, date) {\n  this._name = name;\n  this._code = code;\n  this._countryCode = countryCode;\n  this._periods = periods;\n\n  this.setDate(date);\n}\n\n/**\n * @returns {string}\n */\nVATCountry.prototype.getName = function () {\n  return this._name;\n};\n\n/**\n *\n * @returns {string}\n */\nVATCountry.prototype.getCode = function () {\n  return this._code;\n};\n\n/**\n * @returns {string}\n */\nVATCountry.prototype.getCountryCode = function () {\n  return this._countryCode;\n};\n\n/**\n * @returns {VATPeriod[]}\n */\nVATCountry.prototype.getPeriods = function () {\n  return this._periods;\n};\n\n/**\n * Set the date for which to return VAT rates.\n *\n * @param {Date|null} date\n */\nVATCountry.prototype.setDate = function (date) {\n  if (!date) {\n    date = new Date();\n  }\n  this._date = date;\n};\n\n/**\n * Get the VATPeriod matching the given date.\n *\n * @param date\n * @returns {VATPeriod|undefined}\n */\nVATCountry.prototype.getPeriod = function (date) {\n  var resultPeriod;\n\n  for (var i = this._periods.length - 1; i >= 0; i--) {\n    var period = this._periods[i];\n\n    if (period.getEffectiveFrom() <= date) {\n      resultPeriod = period;\n    }\n  }\n\n  return resultPeriod;\n};\n\n/**\n * Get the VATPeriod matching the current date.\n *\n * @returns {VATPeriod||undefined}\n */\nVATCountry.prototype.getCurrentPeriod = function () {\n  return this.getPeriod(this._date);\n};\n\n/**\n * Did this country use VAT on the given date.\n *\n * @returns {boolean}\n */\nVATCountry.prototype.usedVATOnDate = function (date) {\n  var period = this.getPeriod(date);\n\n  return !!(period && period.getStandardRate());\n};\n\n/**\n * Did this country use VAT on the current date.\n *\n * @returns {boolean}\n */\nVATCountry.prototype.usedVATOnCurrentDate = function () {\n  return this.usedVATOnDate(this._date);\n};\n\n/**\n * Get the super reduced rate for this country.\n *\n * @returns {number|undefined}\n */\nVATCountry.prototype.getSuperReducedRate = function () {\n  var period = this.getCurrentPeriod();\n\n  return period ? period.getSuperReducedRate() : undefined;\n};\n\n/**\n * Get the reduced rate for this country.\n *\n * @returns {number[]|undefined}\n */\nVATCountry.prototype.getReducedRates = function () {\n  var period = this.getCurrentPeriod();\n\n  return period ? period.getReducedRates() : undefined;\n};\n\n/**\n * Get the standard rate for this country.\n *\n * @returns {number|undefined}\n */\nVATCountry.prototype.getStandardRate = function () {\n  var period = this.getCurrentPeriod();\n\n  return period ? period.getStandardRate() : undefined;\n};\n\n/**\n * Get the parking rate for this country.\n *\n * @returns {number|undefined}\n */\nVATCountry.prototype.getParkingRate = function () {\n  var period = this.getCurrentPeriod();\n\n  return period ? period.getParkingRate() : undefined;\n};\n\nmodule.exports = VATCountry;\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n/**\n * VATPeriod\n *\n * @param {Date} effectiveFrom\n * @param {number|undefined} [superReduced]\n * @param {array|undefined} [reduced]\n * @param {number|undefined} [standard]\n * @param {number|undefined} [parking]\n */\nfunction VATPeriod(effectiveFrom, superReduced, reduced, standard, parking) {\n  this._effectiveFrom = effectiveFrom;\n  this._superReduced = superReduced;\n  this._reduced = reduced;\n  this._standard = standard;\n  this._parking = parking;\n}\n\n/**\n * Get the Date from which this period is effective.\n *\n * @returns {Date}\n */\nVATPeriod.prototype.getEffectiveFrom = function () {\n  return this._effectiveFrom;\n};\n\n/**\n * Get the super reduced rate.\n *\n * @returns {number|undefined}\n */\nVATPeriod.prototype.getSuperReducedRate = function () {\n  return this._superReduced;\n};\n\n/**\n * Get the reduced rates.\n *\n * @returns {number[]|undefined}\n */\nVATPeriod.prototype.getReducedRates = function () {\n  return this._reduced;\n};\n\n/**\n * Get the standard rate.\n *\n * @returns {number|undefined}\n */\nVATPeriod.prototype.getStandardRate = function () {\n  return this._standard;\n};\n\n/**\n * Get the parking rate.\n *\n * @returns {number|undefined}\n */\nVATPeriod.prototype.getParkingRate = function () {\n  return this._parking;\n};\n\nmodule.exports = VATPeriod;\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar json = __webpack_require__(0);\nvar VATCountries = __webpack_require__(1);\n\n/**\n * VATRates\n *\n * @param {Date} [date]\n */\nfunction VATRates(date) {\n  this._countries = VATCountries;\n  this.setDate(date);\n}\n\n/**\n * @param {Date|string} date\n */\nVATRates.prototype.setDate = function (date) {\n  if (!date) {\n    date = new Date();\n  } else if (typeof date === 'string') {\n    date = new Date(date);\n  }\n\n  this._date = date;\n\n  // set this date on all countries\n  var countries = [];\n\n  this._countries.forEach(function (country) {\n    country.setDate(date);\n    countries.push(country);\n  });\n\n  this._countries = countries.length > 0 ? countries : undefined;\n};\n\n/**\n * Get the countries that used VAT at the current date.\n * Optionally include countries that no longer use VAT.\n *\n * @param {boolean} [includeNoLongerUsingVAT]\n * @return {VATCountry[]}\n */\nVATRates.prototype.getCountries = function (includeNoLongerUsingVAT) {\n  if (includeNoLongerUsingVAT) {\n    return this._countries;\n  }\n\n  var countries = [];\n\n  this._countries.forEach(function (country) {\n    if (country.usedVATOnCurrentDate()) {\n      countries.push(country);\n    }\n  });\n\n  return countries;\n};\n\n/**\n * Find a country that used VAT at the current date.\n *\n * @param {string} countryCode The country code to look for.\n * @returns {VATCountry|undefined} Returns the matched VATCountry, else `undefined`.\n */\nVATRates.prototype.getCountry = function (countryCode) {\n  countryCode = countryCode.toUpperCase();\n  var countries = this.getCountries(),\n      country;\n\n  for (var i = 0; i < countries.length; i++) {\n    if (countries[i].getCode() === countryCode || countries[i].getCountryCode() === countryCode) {\n      country = countries[i];\n    }\n  }\n\n  return country;\n};\n\n/**\n * Check if a country used VAT at the current date.\n *\n * @param {string} countryCode\n * @returns {boolean}\n */\nVATRates.prototype.isVATCountry = function (countryCode) {\n  // A country needs at least a standard rate at the current date.\n  // This way we can remove countries from EU/VAT by adding a `period` without rates to the JSON.\n  var country = this.getCountry(countryCode);\n\n  return !!(country && country.usedVATOnCurrentDate());\n};\n\n/**\n * Get the super reduced rate for a country.\n *\n * @param {string} countryCode\n * @returns {number|undefined} Returns a number or `undefined`.\n */\nVATRates.prototype.getSuperReducedRate = function (countryCode) {\n  var country, result;\n  if (country = this.getCountry(countryCode)) {\n    result = country.getSuperReducedRate();\n  }\n  return result;\n};\n\n/**\n * Get the reduced rates for a country.\n *\n * @param {string} countryCode\n * @returns {number[]|undefined} Returns an Array of numbers, else `undefined`.\n */\nVATRates.prototype.getReducedRates = function (countryCode) {\n  var country, result;\n  if (country = this.getCountry(countryCode)) {\n    result = country.getReducedRates();\n  }\n  return result;\n};\n\n/**\n * Get the standard rate for a country.\n *\n * @param {string} countryCode\n * @returns {number|undefined} Returns a number or `undefined`.\n */\nVATRates.prototype.getStandardRate = function (countryCode) {\n  var country, result;\n  if (country = this.getCountry(countryCode)) {\n    result = country.getStandardRate();\n  }\n  return result;\n};\n\n/**\n * Get the parking rate for a country.\n *\n * @param {string} countryCode\n * @returns {number|undefined} Returns a number or `undefined`.\n */\nVATRates.prototype.getParkingRate = function (countryCode) {\n  var country, result;\n  if (country = this.getCountry(countryCode)) {\n    result = country.getParkingRate();\n  }\n  return result;\n};\n\n/**\n * The raw JSON data.\n *\n * @returns {Object}\n */\nVATRates.prototype.getJSON = function () {\n  return json;\n};\n\nmodule.exports = VATRates;\n\n/***/ })\n/******/ ]);\n});"],"names":[],"sourceRoot":""}