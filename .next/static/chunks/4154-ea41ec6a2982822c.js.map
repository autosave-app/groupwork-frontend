{"version":3,"file":"static/chunks/4154-ea41ec6a2982822c.js","mappings":"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","sources":["webpack://_N_E/./components/StyledCard.tsx","webpack://_N_E/./components/StyledCheckbox.js","webpack://_N_E/./components/StyledInputField.js","webpack://_N_E/./components/icons/PrivateInfoIcon.js"],"sourcesContent":["import React from 'react';\nimport styledPropTypes from '@styled-system/prop-types';\nimport styled from 'styled-components';\nimport {\n  background,\n  BackgroundProps,\n  border,\n  BorderProps,\n  color,\n  ColorProps,\n  compose,\n  flexbox,\n  FlexboxProps,\n  layout,\n  LayoutProps,\n  position,\n  PositionProps,\n  shadow,\n  ShadowProps,\n  space,\n  SpaceProps,\n  typography,\n  TypographyProps,\n} from 'styled-system';\n\ntype StyledCardProps = BackgroundProps &\n  BorderProps &\n  FlexboxProps &\n  LayoutProps &\n  PositionProps &\n  SpaceProps &\n  TypographyProps &\n  ShadowProps &\n  ColorProps &\n  React.HTMLProps<HTMLDivElement>;\n\n/**\n * A simple styled-component to contain content in a card UI using styled-system.\n *\n * @see See [styled-system docs](https://github.com/jxnblk/styled-system/blob/master/docs/api.md) for usage of those props\n */\nconst StyledCard = styled.div<StyledCardProps>(\n  compose(flexbox, typography, background, border, shadow, color, layout, position, space),\n);\n\nStyledCard.propTypes = {\n  ...styledPropTypes.flexbox,\n  ...styledPropTypes.typography,\n  ...styledPropTypes.background,\n  ...styledPropTypes.border,\n  ...styledPropTypes.shadow,\n  ...styledPropTypes.color,\n  ...styledPropTypes.layout,\n  ...styledPropTypes.space,\n  ...styledPropTypes.position,\n};\n\nStyledCard.defaultProps = {\n  bg: 'white.full',\n  borderWidth: '1px',\n  borderStyle: 'solid',\n  borderColor: 'black.300',\n  borderRadius: '8px',\n  overflowX: 'hidden',\n  overflowY: 'hidden',\n};\n\n/** @component */\nexport default StyledCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { themeGet } from '@styled-system/theme-get';\nimport { omit } from 'lodash';\nimport styled, { css } from 'styled-components';\nimport { size, typography } from 'styled-system';\n\nimport StyledSpinner from './StyledSpinner';\n\nconst IconCheckmark = () => {\n  return (\n    <svg width=\"8\" height=\"8\" viewBox=\"0 0 8 8\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path\n        id=\"checkmark-tiny\"\n        d=\"M3.30913 8C3.0158 8 2.73358 7.88442 2.52358 7.67438L0.32583 5.47599C-0.10861 5.04257 -0.10861 4.34021 0.32583 3.90569C0.760269 3.47116 1.46248 3.47116 1.89692 3.90569L3.16913 5.17835L5.98574 0.462633C6.34352 -0.0341285 7.03573 -0.149706 7.53683 0.20814C8.03572 0.565985 8.14905 1.26056 7.79128 1.75843L4.21134 7.53769C4.01245 7.81663 3.68357 8 3.30913 8Z\"\n      />\n    </svg>\n  );\n};\n\nconst CustomCheckbox = styled.span`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: absolute;\n  cursor: pointer;\n  border: 1px solid #dcdee0;\n  border-radius: 4px;\n  background-color: white;\n  transition: background-color 0.2s;\n\n  svg {\n    opacity: 0;\n    height: 0.572em;\n    width: 0.572em;\n    fill: white;\n  }\n\n  ${StyledSpinner} {\n    opacity: 1;\n    fill: #999999;\n  }\n`;\n\nconst CheckboxContainer = styled.div`\n  position: relative;\n  display: flex;\n  align-items: ${props => props.alignItems};\n  line-height: 1.4em;\n  cursor: pointer;\n  ${typography}\n  width: ${props => props.width};\n\n  /* Hide the default checkbox */\n  input {\n    position: absolute;\n    opacity: 0;\n    height: 0;\n    width: 0;\n  }\n\n  label {\n    cursor: pointer;\n    margin: 0;\n    margin-left: 2.2rem;\n    z-index: 9;\n    font-weight: normal;\n    width: auto;\n  }\n\n  /* Show our custom checkbox */\n  ${CustomCheckbox} {\n    ${size}\n    ${props =>\n      props.error &&\n      css`\n        border-color: ${themeGet('colors.red.500')};\n      `}\n  }\n\n  /* Disabled */\n  input:disabled {\n    & ~ ${CustomCheckbox} {\n      background: #f7f8fa;\n      border: 1px solid #e8e9eb;\n      cursor: not-allowed;\n      svg {\n        fill: ${themeGet('colors.primary.200')};\n      }\n    }\n    & ~ label {\n      cursor: not-allowed;\n    }\n  }\n\n  ${props =>\n    props.$checked\n      ? css`\n          /* Checked */\n          ${CustomCheckbox} {\n            background: ${themeGet('colors.primary.500')};\n            border-color: ${themeGet('colors.primary.500')};\n            svg {\n              opacity: 1;\n            }\n            ${StyledSpinner} {\n              fill: #eeeeee;\n            }\n          }\n        `\n      : css`\n          /* Hover label / checkbox - only for pointer devices (ignored on touch devices) */\n          @media (hover: hover) {\n            &:hover ${CustomCheckbox} {\n              background: ${themeGet('colors.primary.100')};\n              border-color: ${themeGet('colors.primary.100')};\n              svg {\n                opacity: 1;\n              }\n            }\n          }\n        `}\n`;\n\nclass StyledCheckbox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { checked: props.defaultChecked };\n  }\n\n  onChange(newValue) {\n    const { name, checked, onChange, disabled, isLoading } = this.props;\n\n    if (disabled || isLoading) {\n      return false;\n    }\n\n    if (checked === undefined) {\n      this.setState({ checked: newValue });\n    }\n\n    if (onChange) {\n      onChange({ name, checked: newValue, type: 'checkbox', target: { name, value: newValue, checked: newValue } });\n    }\n  }\n\n  render() {\n    const { name, checked, label, disabled, size, inputId, width, alignItems, isLoading, fontSize, ...props } =\n      this.props;\n    const realChecked = checked === undefined ? this.state.checked : checked;\n    return (\n      <CheckboxContainer\n        role=\"button\"\n        tabIndex={0}\n        $checked={realChecked}\n        onClick={e => {\n          e.preventDefault();\n          e.stopPropagation();\n          this.onChange(!realChecked);\n        }}\n        onKeyDown={event => {\n          if (event.key === 'Enter' || event.key === ' ') {\n            event.preventDefault();\n            this.onChange(!realChecked);\n          }\n        }}\n        fontSize={fontSize || size}\n        size={size}\n        width={width}\n        alignItems={alignItems}\n        data-cy={`checkbox-${name}`}\n        {...omit(props, ['defaultChecked', 'onChange'])}\n      >\n        <input\n          id={inputId}\n          name={name}\n          type=\"checkbox\"\n          checked={realChecked}\n          disabled={disabled}\n          readOnly\n          tabIndex=\"-1\" // Prevents the checkbox from being focused, since we're using the container as the focusable element\n        />\n        <CustomCheckbox data-cy=\"custom-checkbox\">\n          {isLoading ? <StyledSpinner size={size} /> : <IconCheckmark />}\n        </CustomCheckbox>\n        {label && <label htmlFor={inputId}>{label}</label>}\n      </CheckboxContainer>\n    );\n  }\n}\n\nStyledCheckbox.defaultProps = {\n  size: '14px',\n  defaultChecked: false,\n  width: 'auto',\n  alignItems: 'center',\n};\n\nStyledCheckbox.propTypes = {\n  /** The name of the input */\n  name: PropTypes.string.isRequired,\n  /** Called when state change with an object like { name, checked, type, target: { value } }*/\n  onChange: PropTypes.func,\n  /** Whether the checkbox is checked. Use it to control the component. If not provided, component will maintain its own state. */\n  checked: PropTypes.bool,\n  /** Whether the checkbox should be checked by default. Ignored if `checked` is provided. */\n  defaultChecked: PropTypes.bool,\n  /** And optional ID for the `<input/>` */\n  inputId: PropTypes.string,\n  /** Whether checkbox should be disabled */\n  disabled: PropTypes.bool,\n  /** An optional label to display next to checkbox */\n  label: PropTypes.node,\n  /** An optional size */\n  size: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.array]),\n  fontSize: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.array]),\n  /** Set this to 'auto' to not take the full width */\n  width: PropTypes.string,\n  /** If true, the checkbox will be replaced by a spinner */\n  isLoading: PropTypes.bool,\n  /** Default to center */\n  alignItems: PropTypes.string,\n  error: PropTypes.any,\n};\n\nexport default StyledCheckbox;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ExclamationCircle } from '@styled-icons/fa-solid/ExclamationCircle';\nimport { Question } from '@styled-icons/remix-line/Question';\nimport { FormattedMessage } from 'react-intl';\n\nimport PrivateInfoIcon from './icons/PrivateInfoIcon';\nimport { Box, Flex } from './Grid';\nimport StyledTooltip from './StyledTooltip';\nimport { P, Span } from './Text';\n\nconst PrivateIconWithSpace = () => (\n  <React.Fragment>\n    &nbsp;\n    <PrivateInfoIcon tooltipProps={{ containerVerticalAlign: 'text-top' }} />\n  </React.Fragment>\n);\n\n// eslint-disable-next-line react/prop-types\nconst QuestionMarkIconWithSpace = ({ helpText, labelFontSize, labelColor }) => (\n  <StyledTooltip content={helpText}>\n    &nbsp;\n    <Question size={labelFontSize} color={labelColor} />\n  </StyledTooltip>\n);\n\n/**\n * Form field to display an input element with a label and errors. Uses [renderProps](https://reactjs.org/docs/render-props.html#using-props-other-than-render) to pass field props like 'name' and 'id' to child input.\n */\nconst StyledInputField = ({\n  children,\n  label = undefined,\n  htmlFor = undefined,\n  name = undefined,\n  error = undefined,\n  hint = undefined,\n  success = undefined,\n  disabled = undefined,\n  required = undefined,\n  inputType = undefined,\n  labelFontSize = undefined,\n  labelFontWeight = 'normal',\n  labelColor = 'black.800',\n  labelProps = undefined,\n  hideOptionalLabel = undefined,\n  useRequiredLabel = undefined,\n  isPrivate = undefined,\n  helpText = undefined,\n  flexDirection = undefined,\n  justifyContent = undefined,\n  alignItems = undefined,\n  ...props\n}) => {\n  const isCheckbox = inputType === 'checkbox';\n  htmlFor = htmlFor || (name ? `input-${name}` : undefined);\n  const displayOptionalLabel = hideOptionalLabel ? false : required === false;\n  const displayRequiredLabel = useRequiredLabel ? required === true : false;\n  labelFontWeight = labelProps?.fontWeight || labelFontWeight;\n  labelFontSize = labelProps?.labelFontSize || labelFontSize;\n  const labelContent = label && (\n    <Span color={labelColor} fontSize={labelFontSize} fontWeight={labelFontWeight}>\n      {label}\n    </Span>\n  );\n\n  const containerFlexDirection = flexDirection ?? (isCheckbox ? 'row-reverse' : 'column');\n  const containerJustifyContent = justifyContent ?? 'flex-end';\n\n  return (\n    <Box {...props}>\n      <Flex alignItems={alignItems} flexDirection={containerFlexDirection} justifyContent={containerJustifyContent}>\n        {label && (\n          <P\n            as=\"label\"\n            htmlFor={htmlFor}\n            display=\"flex\"\n            alignItems=\"center\"\n            fontSize={labelFontSize}\n            fontWeight={labelFontWeight}\n            mb={isCheckbox ? 0 : 2}\n            mr={2}\n            ml={isCheckbox ? 2 : undefined}\n            cursor={isCheckbox ? 'pointer' : undefined}\n            {...labelProps}\n          >\n            {displayOptionalLabel && !isCheckbox ? (\n              <Span color=\"black.700\" fontWeight=\"normal\">\n                <FormattedMessage\n                  id=\"OptionalFieldLabel\"\n                  defaultMessage=\"{field} (optional)\"\n                  values={{ field: labelContent }}\n                />\n                {isPrivate && <PrivateIconWithSpace />}\n              </Span>\n            ) : displayRequiredLabel ? (\n              <Span color=\"black.700\">\n                {labelContent} * {isPrivate && <PrivateIconWithSpace />}\n              </Span>\n            ) : (\n              <React.Fragment>\n                {labelContent}\n                {isPrivate && <PrivateIconWithSpace />}\n              </React.Fragment>\n            )}\n            {helpText && (\n              <QuestionMarkIconWithSpace helpText={helpText} labelColor={labelColor} labelFontSize={labelFontSize} />\n            )}\n          </P>\n        )}\n        {typeof children === 'function'\n          ? children({\n              name: name || htmlFor,\n              id: htmlFor,\n              type: inputType,\n              error: Boolean(error) || undefined,\n              success,\n              disabled,\n              required,\n            })\n          : children}\n      </Flex>\n      {error && typeof error === 'string' && (\n        <Box pt={2}>\n          <ExclamationCircle color=\"#E03F6A\" size={16} />\n          <Span ml={1} color=\"black.700\" fontSize=\"14px\" css={{ verticalAlign: 'middle' }}>\n            {error}\n          </Span>\n        </Box>\n      )}\n      {hint && (!error || typeof error !== 'string') && (\n        <Box mt=\"6px\">\n          <Span fontSize=\"12px\" color=\"black.700\" css={{ verticalAlign: 'middle' }}>\n            {hint}\n          </Span>\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nStyledInputField.propTypes = {\n  /** React component to wrap with the label and errors */\n  children: PropTypes.oneOfType([PropTypes.func, PropTypes.node]).isRequired,\n  /** Show disabled state for field */\n  disabled: PropTypes.bool,\n  /** If true, a \"Private\" lock icon will be displayed next to the label */\n  isPrivate: PropTypes.bool,\n  /** text to display below the input or error status */\n  error: PropTypes.any,\n  /** text to display below the input when there's no error */\n  hint: PropTypes.any,\n  /** the label's 'for' attribute to be used as the 'name' and 'id' for the input */\n  htmlFor: PropTypes.string,\n  /** By default name is equal to htmlFor, but you can use this prop to override it */\n  name: PropTypes.string,\n  /** text to display above the input */\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  /** Passed to input as `type`. Adapts layout for checkboxes */\n  inputType: PropTypes.string,\n  /** Show success state for field */\n  success: PropTypes.bool,\n  /** If set to false, the field will be marked as optional */\n  required: PropTypes.bool,\n  /** If set to true, will hide the (optional) label tag even if required is false and display \"*\" if required */\n  useRequiredLabel: PropTypes.bool,\n  /** Font size for the label */\n  labelFontSize: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.array]),\n  /** Font weight for the label */\n  labelFontWeight: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.array]),\n  labelColor: PropTypes.string,\n  /** Anything here will be passed down to label */\n  labelProps: PropTypes.object,\n  /** Help text that will appear next to the label (a small question mark with help text shown when hovered) */\n  helpText: PropTypes.node,\n  /** All props from `Box` */\n  ...Box.propTypes,\n};\n\nexport default StyledInputField;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Lock } from '@styled-icons/material/Lock';\nimport { defineMessages, useIntl } from 'react-intl';\n\nimport StyledTooltip from '../StyledTooltip';\n\nconst msg = defineMessages({\n  defaultContent: {\n    id: 'Tooltip.PrivateInfo',\n    defaultMessage: 'This info is private',\n  },\n});\n\n/**\n * A lock icon with a tooltip indicating that this info is private\n */\nconst PrivateInfoIcon = ({ children, size, tooltipProps, withoutTooltip, color, ...props }) => {\n  const { formatMessage } = useIntl();\n  const icon = <Lock size={size} color={color} {...props} />;\n\n  if (withoutTooltip) {\n    return icon;\n  }\n\n  return (\n    <StyledTooltip\n      childrenContainer=\"span\"\n      content={() => children || formatMessage(msg.defaultContent)}\n      {...tooltipProps}\n    >\n      {icon}\n    </StyledTooltip>\n  );\n};\n\nPrivateInfoIcon.propTypes = {\n  /** A message to display in the tooltip in place of the default one */\n  children: PropTypes.node,\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  tooltipProps: PropTypes.object,\n  withoutTooltip: PropTypes.bool,\n  color: PropTypes.string,\n};\n\nPrivateInfoIcon.defaultProps = {\n  size: '0.9em',\n  color: '#75777A',\n};\n\nexport default PrivateInfoIcon;\n"],"names":["styledPropTypes","styled","background","border","color","compose","flexbox","layout","position","shadow","space","typography","StyledCard","div","propTypes","defaultProps","bg","borderWidth","borderStyle","borderColor","borderRadius","overflowX","overflowY","React","themeGet","css","size","StyledSpinner","IconCheckmark","CustomCheckbox","span","CheckboxContainer","props","alignItems","width","error","$checked","StyledCheckbox","state","checked","defaultChecked","newValue","name","onChange","disabled","isLoading","undefined","setState","type","target","value","label","inputId","fontSize","realChecked","e","preventDefault","stopPropagation","event","key","Component","ExclamationCircle","Question","FormattedMessage","PrivateInfoIcon","Box","Flex","StyledTooltip","P","Span","PrivateIconWithSpace","containerVerticalAlign","QuestionMarkIconWithSpace","helpText","labelFontSize","labelColor","StyledInputField","children","htmlFor","hint","success","required","inputType","labelFontWeight","labelProps","hideOptionalLabel","useRequiredLabel","isPrivate","flexDirection","justifyContent","isCheckbox","displayOptionalLabel","displayRequiredLabel","fontWeight","labelContent","containerFlexDirection","containerJustifyContent","field","id","Boolean","verticalAlign","Lock","defineMessages","useIntl","msg","defaultContent","defaultMessage","tooltipProps","withoutTooltip","formatMessage","icon"],"sourceRoot":""}