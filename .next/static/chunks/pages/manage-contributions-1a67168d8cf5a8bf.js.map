{"version":3,"file":"static/chunks/pages/manage-contributions-1a67168d8cf5a8bf.js","mappings":"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","sources":["webpack://_N_E/./components/AuthenticatedPage.js","webpack://_N_E/./components/recurring-contributions/AddPaymentMethod.js","webpack://_N_E/./components/recurring-contributions/UpdatePaymentMethodPopUp.js","webpack://_N_E/./pages/manage-contributions.js","webpack://_N_E/?f6ca"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\n\nimport Container from './Container';\nimport { Flex } from './Grid';\nimport Loading from './Loading';\nimport MessageBox from './MessageBox';\nimport Page from './Page';\nimport SignInOrJoinFree from './SignInOrJoinFree';\nimport { withUser } from './UserProvider';\n\n/**\n * A wrapper around `Page` that will display a spinner while user is loading.\n * If authentication fails, users will be prompted with a form to login that will\n * redirect them to the correct page once they do.\n *\n * Unless a `noRobots={true}` is provided, pages wrapped with this helper will not be indexed\n * by default.\n *\n * ## Usage\n *\n * ```jsx\n * <AuthenticatedPage>\n *   {(LoggedInUser) => (\n *     <div>\n *       Hello {LoggedInUser.collective.name}!\n *     </div>\n *   )}\n * </AuthenticatedPage>\n * ```\n */\nclass AuthenticatedPage extends React.Component {\n  static propTypes = {\n    /** A child renderer to call when user is properly authenticated */\n    children: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),\n    /** Whether user can signup on this page */\n    disableSignup: PropTypes.bool,\n    /** Whether this page is limited to root users */\n    rootOnly: PropTypes.bool,\n    /** @ignore from withUser */\n    loadingLoggedInUser: PropTypes.bool,\n    /** @ignore from withUser */\n    LoggedInUser: PropTypes.object,\n  };\n\n  renderContent(loadingLoggedInUser, LoggedInUser) {\n    if (!LoggedInUser) {\n      return (\n        <Container display=\"flex\" justifyContent=\"center\" py={[5, null, 6]} px={2}>\n          {loadingLoggedInUser ? (\n            <Loading />\n          ) : (\n            <Flex flexDirection=\"column\" alignItems=\"center\">\n              <MessageBox type=\"warning\" mb={4} maxWidth={400} withIcon>\n                <FormattedMessage\n                  id=\"authorization.loginRequired\"\n                  defaultMessage=\"You need to be logged in to continue.\"\n                />\n              </MessageBox>\n              <SignInOrJoinFree defaultForm=\"signin\" disableSignup={this.props.disableSignup} />\n            </Flex>\n          )}\n        </Container>\n      );\n    } else if (this.props.rootOnly && !LoggedInUser.isRoot) {\n      return (\n        <Flex flexDirection=\"column\" alignItems=\"center\">\n          <MessageBox type=\"warning\" my={[5, 6, 7]} maxWidth={400} withIcon>\n            <FormattedMessage\n              id=\"AuthenticatedPage.RootOnly\"\n              defaultMessage=\"This page is limited to site administrators\"\n            />\n          </MessageBox>\n        </Flex>\n      );\n    } else if (typeof this.props.children === 'function') {\n      return this.props.children(LoggedInUser);\n    } else {\n      return this.props.children;\n    }\n  }\n\n  render() {\n    const { LoggedInUser, loadingLoggedInUser, ...pageProps } = this.props;\n\n    return (\n      <Page noRobots {...pageProps}>\n        {this.renderContent(loadingLoggedInUser, LoggedInUser)}\n      </Page>\n    );\n  }\n}\n\nexport default withUser(AuthenticatedPage);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport dayjs from 'dayjs';\nimport { FormattedMessage } from 'react-intl';\n\nimport {\n  GQLV2_SUPPORTED_PAYMENT_METHOD_TYPES,\n  PAYMENT_METHOD_SERVICE,\n  PAYMENT_METHOD_TYPE,\n} from '../../lib/constants/payment-methods';\nimport { getIntervalFromContributionFrequency } from '../../lib/date-utils';\n\nimport CreditCard from '../../components/icons/CreditCard';\n\nimport { Flex } from '../Grid';\nimport NewCreditCardForm from '../NewCreditCardForm';\nimport PayWithPaypalButton from '../PayWithPaypalButton';\nimport StyledButton from '../StyledButton';\nimport { TOAST_TYPE, useToasts } from '../ToastProvider';\n\n/** Return the next charge date, or `undefined` if subscription is past due */\nexport const getSubscriptionStartDate = order => {\n  if (order.nextChargeDate && dayjs(order.nextChargeDate).isAfter(dayjs())) {\n    return order.nextChargeDate;\n  }\n};\n\nconst STRIPE = 'stripe';\n\nconst AddPaymentMethod = ({ onStripeReady, onPaypalSuccess, setNewPaymentMethodInfo, order, isSubmitting }) => {\n  const host = order.toAccount.host;\n  const hasStripe = host.supportedPaymentMethods.includes(GQLV2_SUPPORTED_PAYMENT_METHOD_TYPES.CREDIT_CARD);\n  const hasPaypal = host.supportedPaymentMethods.includes(GQLV2_SUPPORTED_PAYMENT_METHOD_TYPES.PAYPAL);\n  const defaultProvider = hasStripe && !hasPaypal ? STRIPE : null;\n  const [selectedProvider, setSelectedProvider] = React.useState(defaultProvider);\n  const { addToast } = useToasts();\n\n  if (!selectedProvider) {\n    return (\n      <Flex flexDirection=\"column\">\n        {hasStripe && (\n          <StyledButton\n            buttonSize=\"small\"\n            data-cy=\"add-pm-select-provider-credit-card-btn\"\n            onClick={() => setSelectedProvider(STRIPE)}\n            mb={2}\n          >\n            <CreditCard size={24} />\n            &nbsp;\n            <FormattedMessage id=\"CreditCard\" defaultMessage=\"Credit Card\" />\n          </StyledButton>\n        )}\n        {host.paypalClientId && (\n          <PayWithPaypalButton\n            totalAmount={order.totalAmount.valueInCents}\n            currency={order.totalAmount.currency}\n            interval={getIntervalFromContributionFrequency(order.frequency)}\n            host={host}\n            collective={order.toAccount}\n            tier={order.tier}\n            style={{ height: 45, size: 'small' }}\n            subscriptionStartDate={getSubscriptionStartDate(order)}\n            isSubmitting={isSubmitting}\n            onError={e => addToast({ type: TOAST_TYPE.ERROR, title: e.message })}\n            onSuccess={({ subscriptionId }) => {\n              onPaypalSuccess({\n                service: PAYMENT_METHOD_SERVICE.PAYPAL,\n                type: PAYMENT_METHOD_TYPE.SUBSCRIPTION,\n                paypalInfo: { subscriptionId },\n              });\n            }}\n          />\n        )}\n      </Flex>\n    );\n  } else if (selectedProvider === STRIPE) {\n    return (\n      <NewCreditCardForm\n        name=\"newCreditCardInfo\"\n        profileType={'USER'}\n        onChange={setNewPaymentMethodInfo}\n        onReady={onStripeReady}\n        hasSaveCheckBox={false}\n        isCompact\n      />\n    );\n  }\n};\n\nAddPaymentMethod.propTypes = {\n  setNewPaymentMethodInfo: PropTypes.func,\n  onStripeReady: PropTypes.func,\n  onPaypalSuccess: PropTypes.func,\n  isSubmitting: PropTypes.bool,\n  order: PropTypes.shape({\n    totalAmount: PropTypes.object,\n    frequency: PropTypes.string,\n    toAccount: PropTypes.object,\n    tier: PropTypes.object,\n  }),\n};\n\nexport default AddPaymentMethod;\n","import React, { Fragment, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { gql, useMutation, useQuery } from '@apollo/client';\nimport { CardElement } from '@stripe/react-stripe-js';\nimport { Lock } from '@styled-icons/boxicons-regular/Lock';\nimport { themeGet } from '@styled-system/theme-get';\nimport { first, get, merge, pick, uniqBy } from 'lodash';\nimport { defineMessages, FormattedMessage, useIntl } from 'react-intl';\nimport styled from 'styled-components';\n\nimport { PAYMENT_METHOD_SERVICE } from '../../lib/constants/payment-methods';\nimport { getErrorFromGraphqlException } from '../../lib/errors';\nimport { API_V2_CONTEXT } from '../../lib/graphql/helpers';\nimport { getPaymentMethodName } from '../../lib/payment_method_label';\nimport { getPaymentMethodIcon, getPaymentMethodMetadata } from '../../lib/payment-method-utils';\nimport { getStripe, stripeTokenToPaymentMethod } from '../../lib/stripe';\n\nimport { Box, Flex } from '../Grid';\nimport I18nFormatters from '../I18nFormatters';\nimport LoadingPlaceholder from '../LoadingPlaceholder';\nimport { withStripeLoader } from '../StripeProvider';\nimport StyledButton from '../StyledButton';\nimport StyledHr from '../StyledHr';\nimport StyledRadioList from '../StyledRadioList';\nimport StyledRoundButton from '../StyledRoundButton';\nimport { P } from '../Text';\nimport { TOAST_TYPE, useToasts } from '../ToastProvider';\n\nimport AddPaymentMethod from './AddPaymentMethod';\n\nconst PaymentMethodBox = styled(Flex)`\n  border-top: 1px solid ${themeGet('colors.black.300')};\n`;\n\nconst messages = defineMessages({\n  updatePaymentMethod: {\n    id: 'subscription.menu.editPaymentMethod',\n    defaultMessage: 'Update payment method',\n  },\n  addPaymentMethod: {\n    id: 'subscription.menu.addPaymentMethod',\n    defaultMessage: 'Add new payment method',\n  },\n});\n\nconst paymentMethodFragment = gql`\n  fragment UpdatePaymentMethodFragment on PaymentMethod {\n    id\n    name\n    data\n    service\n    type\n    balance {\n      value\n      valueInCents\n      currency\n    }\n    account {\n      id\n    }\n  }\n`;\n\nconst paymentMethodsQuery = gql`\n  query UpdatePaymentMethodPopUpPaymentMethod($accountId: String!, $orderId: String!) {\n    account(id: $accountId) {\n      id\n      paymentMethods(type: [CREDITCARD, GIFTCARD, PREPAID, COLLECTIVE]) {\n        id\n        ...UpdatePaymentMethodFragment\n      }\n    }\n    order(order: { id: $orderId }) {\n      id\n      paymentMethod {\n        id\n        ...UpdatePaymentMethodFragment\n      }\n    }\n  }\n  ${paymentMethodFragment}\n`;\n\nconst updatePaymentMethodMutation = gql`\n  mutation UpdatePaymentMethod(\n    $order: OrderReferenceInput!\n    $paymentMethod: PaymentMethodReferenceInput\n    $paypalSubscriptionId: String\n  ) {\n    updateOrder(order: $order, paymentMethod: $paymentMethod, paypalSubscriptionId: $paypalSubscriptionId) {\n      id\n      status\n      paymentMethod {\n        id\n        service\n        name\n        type\n        data\n        expiryDate\n        balance {\n          value\n          valueInCents\n          currency\n        }\n      }\n    }\n  }\n`;\n\nconst paymentMethodResponseFragment = gql`\n  fragment paymentMethodResponseFragment on CreditCardWithStripeError {\n    paymentMethod {\n      id\n    }\n    stripeError {\n      message\n      response\n    }\n  }\n`;\n\nexport const addCreditCardMutation = gql`\n  mutation AddCreditCardRecurringContributions(\n    $creditCardInfo: CreditCardCreateInput!\n    $name: String!\n    $account: AccountReferenceInput!\n  ) {\n    addCreditCard(creditCardInfo: $creditCardInfo, name: $name, account: $account) {\n      ...paymentMethodResponseFragment\n    }\n  }\n  ${paymentMethodResponseFragment}\n`;\n\nexport const confirmCreditCardMutation = gql`\n  mutation ConfirmCreditCardRecurringContributions($paymentMethod: PaymentMethodReferenceInput!) {\n    confirmCreditCard(paymentMethod: $paymentMethod) {\n      ...paymentMethodResponseFragment\n    }\n  }\n  ${paymentMethodResponseFragment}\n`;\n\nconst mutationOptions = { context: API_V2_CONTEXT };\n\nconst sortAndFilterPaymentMethods = (paymentMethods, contribution, addedPaymentMethod, existingPaymentMethod) => {\n  if (!paymentMethods) {\n    return null;\n  }\n\n  const minBalance = contribution.amount.valueInCents;\n  const uniquePMs = uniqBy(paymentMethods, 'id');\n  const getIsDisabled = pm => pm.balance.valueInCents < minBalance;\n\n  // Make sure we always include the current payment method\n  if (existingPaymentMethod && !uniquePMs.some(pm => pm.id === existingPaymentMethod.id)) {\n    uniquePMs.unshift(existingPaymentMethod);\n  }\n\n  uniquePMs.sort((pm1, pm2) => {\n    // Put disabled PMs at the end\n    if (getIsDisabled(pm1) && !getIsDisabled(pm2)) {\n      return 1;\n    } else if (getIsDisabled(pm2) && !getIsDisabled(pm1)) {\n      return -1;\n    }\n\n    // If we've just added a PM, put it at the top of the list\n    if (addedPaymentMethod) {\n      if (addedPaymentMethod.id === pm1.id) {\n        return -1;\n      } else if (addedPaymentMethod.id === pm2.id) {\n        return 1;\n      }\n    }\n\n    // Put the PM that matches this recurring contribution just after the newly added\n    if (existingPaymentMethod) {\n      if (existingPaymentMethod.id === pm1.id) {\n        return -1;\n      } else if (existingPaymentMethod.id === pm2.id) {\n        return 1;\n      }\n    }\n\n    return 0;\n  });\n\n  return uniquePMs.map(pm => ({\n    key: `pm-${pm.id}`,\n    title: getPaymentMethodName(pm),\n    subtitle: getPaymentMethodMetadata(pm),\n    icon: getPaymentMethodIcon(pm),\n    paymentMethod: pm,\n    disabled: getIsDisabled(pm),\n    id: pm.id,\n    CollectiveId: pm.account?.id,\n  }));\n};\n\nconst useUpdatePaymentMethod = contribution => {\n  const { addToast } = useToasts();\n  const [submitUpdatePaymentMethod, { loading }] = useMutation(updatePaymentMethodMutation, mutationOptions);\n\n  return {\n    isSubmitting: loading,\n    updatePaymentMethod: async paymentMethod => {\n      const hasUpdate = !contribution.paymentMethod || paymentMethod.id !== contribution.paymentMethod.id;\n      try {\n        if (hasUpdate) {\n          const variables = { order: { id: contribution.id } };\n          if (paymentMethod.service === PAYMENT_METHOD_SERVICE.PAYPAL) {\n            variables.paypalSubscriptionId = paymentMethod.paypalInfo.subscriptionId;\n          } else {\n            variables.paymentMethod = { id: paymentMethod.value ? paymentMethod.value.id : paymentMethod.id };\n          }\n          await submitUpdatePaymentMethod({ variables });\n        }\n        addToast({\n          type: TOAST_TYPE.SUCCESS,\n          message: (\n            <FormattedMessage\n              id=\"subscription.createSuccessUpdated\"\n              defaultMessage=\"Your recurring contribution has been <strong>updated</strong>.\"\n              values={I18nFormatters}\n            />\n          ),\n        });\n      } catch (error) {\n        const errorMsg = getErrorFromGraphqlException(error).message;\n        addToast({ type: TOAST_TYPE.ERROR, message: errorMsg });\n        return false;\n      }\n    },\n  };\n};\n\nconst UpdatePaymentMethodPopUp = ({ contribution, onCloseEdit, loadStripe, account }) => {\n  const intl = useIntl();\n  const { addToast } = useToasts();\n\n  // state management\n  const [showAddPaymentMethod, setShowAddPaymentMethod] = useState(false);\n  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState(null);\n  const [loadingSelectedPaymentMethod, setLoadingSelectedPaymentMethod] = useState(true);\n  const [stripe, setStripe] = useState(null);\n  const [stripeElements, setStripeElements] = useState(null);\n  const [newPaymentMethodInfo, setNewPaymentMethodInfo] = useState(null);\n  const [addedPaymentMethod, setAddedPaymentMethod] = useState(null);\n  const [addingPaymentMethod, setAddingPaymentMethod] = useState(false);\n  const { isSubmitting, updatePaymentMethod } = useUpdatePaymentMethod(contribution);\n\n  // GraphQL mutations and queries\n  const { data, refetch } = useQuery(paymentMethodsQuery, {\n    variables: { accountId: account.id, orderId: contribution.id },\n    context: API_V2_CONTEXT,\n    fetchPolicy: 'network-only',\n  });\n  const [submitAddPaymentMethod] = useMutation(addCreditCardMutation, mutationOptions);\n  const [submitConfirmPaymentMethodMutation] = useMutation(confirmCreditCardMutation, mutationOptions);\n\n  const handleAddPaymentMethodResponse = async response => {\n    const { paymentMethod, stripeError } = response;\n    if (stripeError) {\n      return handleStripeError(paymentMethod, stripeError);\n    } else {\n      return handleSuccess(paymentMethod);\n    }\n  };\n\n  const handleStripeError = async (paymentMethod, stripeError) => {\n    const { message, response } = stripeError;\n\n    if (!response) {\n      addToast({\n        type: TOAST_TYPE.ERROR,\n        message: message,\n      });\n      setAddingPaymentMethod(false);\n      return false;\n    }\n\n    const stripe = await getStripe();\n    const result = await stripe.handleCardSetup(response.setupIntent.client_secret);\n    if (result.error) {\n      addToast({\n        type: TOAST_TYPE.ERROR,\n        message: result.error.message,\n      });\n      setAddingPaymentMethod(false);\n      return false;\n    } else {\n      try {\n        const response = await submitConfirmPaymentMethodMutation({\n          variables: { paymentMethod: { id: paymentMethod.id } },\n        });\n        return handleSuccess(response.data.confirmCreditCard.paymentMethod);\n      } catch (error) {\n        addToast({\n          type: TOAST_TYPE.ERROR,\n          message: error.message,\n        });\n        setAddingPaymentMethod(false);\n        return false;\n      }\n    }\n  };\n\n  const handleSuccess = paymentMethod => {\n    setAddingPaymentMethod(false);\n    refetch();\n    setAddedPaymentMethod(paymentMethod);\n    setShowAddPaymentMethod(false);\n    setLoadingSelectedPaymentMethod(true);\n  };\n\n  // load stripe on mount\n  useEffect(() => {\n    loadStripe();\n  }, []);\n\n  // data handling\n  const paymentMethods = get(data, 'account.paymentMethods', null);\n  const existingPaymentMethod = get(data, 'order.paymentMethod', null);\n  const filterPaymentMethodsParams = [paymentMethods, contribution, addedPaymentMethod, existingPaymentMethod];\n  const paymentOptions = React.useMemo(\n    () => sortAndFilterPaymentMethods(...filterPaymentMethodsParams),\n    filterPaymentMethodsParams,\n  );\n\n  useEffect(() => {\n    if (!paymentOptions) {\n      return;\n    }\n    if (selectedPaymentMethod === null && contribution.paymentMethod) {\n      setSelectedPaymentMethod(first(paymentOptions.filter(option => option.id === contribution.paymentMethod.id)));\n    } else if (addedPaymentMethod) {\n      setSelectedPaymentMethod(paymentOptions.find(option => option.id === addedPaymentMethod.id));\n    }\n    setLoadingSelectedPaymentMethod(false);\n  }, [paymentOptions, addedPaymentMethod]);\n\n  return (\n    <Fragment>\n      <Flex width={1} alignItems=\"center\" justifyContent=\"center\" minHeight={50} px={3}>\n        <P my={2} fontSize=\"12px\" textTransform=\"uppercase\" color=\"black.700\">\n          {showAddPaymentMethod\n            ? intl.formatMessage(messages.addPaymentMethod)\n            : intl.formatMessage(messages.updatePaymentMethod)}\n        </P>\n        <Flex flexGrow={1} alignItems=\"center\">\n          <StyledHr width=\"100%\" mx={2} />\n        </Flex>\n        {showAddPaymentMethod ? (\n          <Lock size={20} />\n        ) : (\n          <StyledRoundButton\n            size={24}\n            onClick={() => setShowAddPaymentMethod(true)}\n            data-cy=\"recurring-contribution-add-pm-button\"\n          >\n            +\n          </StyledRoundButton>\n        )}\n      </Flex>\n      {showAddPaymentMethod ? (\n        <Box px={1} pt={2} pb={3}>\n          <AddPaymentMethod\n            order={contribution}\n            isSubmitting={isSubmitting}\n            setNewPaymentMethodInfo={setNewPaymentMethodInfo}\n            onStripeReady={({ stripe, stripeElements }) => {\n              setStripe(stripe);\n              setStripeElements(stripeElements);\n            }}\n            onPaypalSuccess={async paypalPaymentMethod => {\n              await updatePaymentMethod(paypalPaymentMethod);\n              onCloseEdit();\n            }}\n          />\n        </Box>\n      ) : loadingSelectedPaymentMethod ? (\n        <LoadingPlaceholder height={100} />\n      ) : (\n        <StyledRadioList\n          id=\"PaymentMethod\"\n          name={`${contribution.id}-PaymentMethod`}\n          keyGetter=\"key\"\n          options={paymentOptions}\n          onChange={setSelectedPaymentMethod}\n          value={selectedPaymentMethod?.key}\n        >\n          {({ radio, value: { title, subtitle, icon } }) => (\n            <PaymentMethodBox minHeight={50} py={2} bg=\"white.full\" data-cy=\"recurring-contribution-pm-box\" px={3}>\n              <Flex alignItems=\"center\">\n                <Box as=\"span\" mr={3} flexWrap=\"wrap\">\n                  {radio}\n                </Box>\n                <Flex mr={2} css={{ flexBasis: '26px' }}>\n                  {icon}\n                </Flex>\n                <Flex flexDirection=\"column\" width=\"100%\">\n                  <P fontSize=\"12px\" fontWeight={subtitle ? 600 : 400} color=\"black.900\" overflowWrap=\"anywhere\">\n                    {title}\n                  </P>\n                  {subtitle && (\n                    <P fontSize=\"12px\" fontWeight={400} lineHeight=\"18px\" color=\"black.500\" overflowWrap=\"anywhere\">\n                      {subtitle}\n                    </P>\n                  )}\n                </Flex>\n              </Flex>\n            </PaymentMethodBox>\n          )}\n        </StyledRadioList>\n      )}\n      <Flex flexGrow={1 / 4} width={1} alignItems=\"center\" justifyContent=\"center\">\n        <Flex flexGrow={1} alignItems=\"center\">\n          <StyledHr width=\"100%\" />\n        </Flex>\n      </Flex>\n      <Flex flexGrow={1 / 4} width={1} alignItems=\"center\" justifyContent=\"center\" minHeight={50}>\n        {showAddPaymentMethod ? (\n          <Fragment>\n            <StyledButton\n              buttonSize=\"tiny\"\n              minWidth={75}\n              onClick={() => {\n                setNewPaymentMethodInfo(null);\n                onCloseEdit();\n              }}\n            >\n              <FormattedMessage id=\"actions.cancel\" defaultMessage=\"Cancel\" />\n            </StyledButton>\n            <StyledButton\n              ml={2}\n              minWidth={75}\n              buttonSize=\"tiny\"\n              buttonStyle=\"secondary\"\n              disabled={newPaymentMethodInfo ? !newPaymentMethodInfo.value?.complete : true}\n              type=\"submit\"\n              loading={addingPaymentMethod}\n              data-cy=\"recurring-contribution-submit-pm-button\"\n              onClick={async () => {\n                setAddingPaymentMethod(true);\n                if (!stripe) {\n                  addToast({\n                    type: TOAST_TYPE.ERROR,\n                    message: (\n                      <FormattedMessage\n                        id=\"Stripe.Initialization.Error\"\n                        defaultMessage=\"There was a problem initializing the payment form. Please reload the page and try again.\"\n                      />\n                    ),\n                  });\n                  setAddingPaymentMethod(false);\n                  return false;\n                }\n                const cardElement = stripeElements.getElement(CardElement);\n                const { token, error } = await stripe.createToken(cardElement);\n\n                if (error) {\n                  addToast({ type: TOAST_TYPE.ERROR, message: error.message });\n                  return false;\n                }\n                const newStripePaymentMethod = stripeTokenToPaymentMethod(token);\n                const newCreditCardInfo = merge(newStripePaymentMethod.data, pick(newStripePaymentMethod, ['token']));\n                try {\n                  const res = await submitAddPaymentMethod({\n                    variables: {\n                      creditCardInfo: newCreditCardInfo,\n                      name: get(newStripePaymentMethod, 'name'),\n                      account: { id: account.id },\n                    },\n                  });\n                  return handleAddPaymentMethodResponse(res.data.addCreditCard);\n                } catch (error) {\n                  const errorMsg = getErrorFromGraphqlException(error).message;\n                  addToast({ type: TOAST_TYPE.ERROR, message: errorMsg });\n                  setAddingPaymentMethod(false);\n                  return false;\n                }\n              }}\n            >\n              <FormattedMessage id=\"save\" defaultMessage=\"Save\" />\n            </StyledButton>\n          </Fragment>\n        ) : (\n          <Fragment>\n            <StyledButton buttonSize=\"tiny\" minWidth={75} onClick={onCloseEdit}>\n              <FormattedMessage id=\"actions.cancel\" defaultMessage=\"Cancel\" />\n            </StyledButton>\n            <StyledButton\n              ml={2}\n              minWidth={75}\n              buttonSize=\"tiny\"\n              buttonStyle=\"secondary\"\n              loading={isSubmitting}\n              data-cy=\"recurring-contribution-update-pm-button\"\n              onClick={() => updatePaymentMethod(selectedPaymentMethod).then(onCloseEdit)}\n            >\n              <FormattedMessage id=\"actions.update\" defaultMessage=\"Update\" />\n            </StyledButton>\n          </Fragment>\n        )}\n      </Flex>\n    </Fragment>\n  );\n};\n\nUpdatePaymentMethodPopUp.propTypes = {\n  data: PropTypes.object,\n  contribution: PropTypes.object.isRequired,\n  onCloseEdit: PropTypes.func,\n  loadStripe: PropTypes.func.isRequired,\n  account: PropTypes.object.isRequired,\n};\n\nexport default withStripeLoader(UpdatePaymentMethodPopUp);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql } from '@apollo/client/react/hoc';\nimport { css } from '@styled-system/css';\nimport { groupBy, isEmpty, mapValues, orderBy, uniqBy } from 'lodash';\nimport memoizeOne from 'memoize-one';\nimport { withRouter } from 'next/router';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport styled from 'styled-components';\n\nimport { generateNotFoundError } from '../lib/errors';\nimport { API_V2_CONTEXT } from '../lib/graphql/helpers';\nimport formatCollectiveType from '../lib/i18n/collective-type';\n\nimport AuthenticatedPage from '../components/AuthenticatedPage';\nimport Avatar from '../components/Avatar';\nimport CollectiveNavbar from '../components/collective-navbar';\nimport { Dimensions } from '../components/collective-page/_constants';\nimport SectionTitle from '../components/collective-page/SectionTitle';\nimport Container from '../components/Container';\nimport ErrorPage from '../components/ErrorPage';\nimport { Flex, Grid } from '../components/Grid';\nimport Link from '../components/Link';\nimport Loading from '../components/Loading';\nimport { manageContributionsQuery } from '../components/recurring-contributions/graphql/queries';\nimport RecurringContributionsContainer from '../components/recurring-contributions/RecurringContributionsContainer';\nimport SignInOrJoinFree from '../components/SignInOrJoinFree';\nimport StyledHr from '../components/StyledHr';\nimport { P, Span } from '../components/Text';\nimport { withUser } from '../components/UserProvider';\n\nconst MainContainer = styled(Container)`\n  max-width: ${Dimensions.MAX_SECTION_WIDTH}px;\n  margin: 0 auto;\n`;\n\nconst MenuEntry = styled(Link)`\n  display: flex;\n  align-items: center;\n  background: white;\n  padding: 8px 12px;\n  cursor: pointer;\n  background: none;\n  color: inherit;\n  border: none;\n  font: inherit;\n  outline: inherit;\n  width: 100%;\n  text-align: left;\n  border-radius: 8px;\n  font-size: 13px;\n\n  ${props =>\n    props.$isActive &&\n    css({\n      fontWeight: 800,\n      backgroundColor: 'primary.100',\n    })}\n\n  &:hover {\n    background: #f9f9f9;\n  }\n`;\n\nclass ManageContributionsPage extends React.Component {\n  static getInitialProps({ query: { slug } }) {\n    return { slug };\n  }\n\n  static propTypes = {\n    slug: PropTypes.string,\n    tab: PropTypes.string,\n    loadingLoggedInUser: PropTypes.bool,\n    LoggedInUser: PropTypes.object,\n    data: PropTypes.shape({\n      loading: PropTypes.bool,\n      error: PropTypes.any,\n      account: PropTypes.object,\n    }), // from withData\n    intl: PropTypes.object,\n    router: PropTypes.object,\n  };\n\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidUpdate() {\n    const { slug, data, router } = this.props;\n    if (data && !data.loading && !data.account && slug?.startsWith('guest-')) {\n      // We used to send links like `/guest-12345/recurring-contributions` by email, which caused troubles when updating the slug.\n      // This redirect ensures compatibility with old links byt redirecting them to the unified page.\n      // See https://github.com/opencollective/opencollective/issues/4876\n      router.replace('/manage-contributions');\n    }\n  }\n\n  getAdministratedAccounts = memoizeOne(loggedInUser => {\n    // Personal profile already includes incognito contributions\n    const adminMemberships = loggedInUser?.memberOf?.filter(m => m.role === 'ADMIN' && !m.collective.isIncognito);\n    const uniqMemberships = uniqBy(adminMemberships, 'collective.id');\n    const groupedMemberships = groupBy(uniqMemberships, 'collective.type');\n    return mapValues(groupedMemberships, memberships => orderBy(memberships, 'collective.name'));\n  });\n\n  render() {\n    const { slug, data, intl, loadingLoggedInUser, LoggedInUser } = this.props;\n\n    if (!data?.loading && !loadingLoggedInUser && LoggedInUser) {\n      if (!data || data.error) {\n        return <ErrorPage data={data} />;\n      } else if (!data.account) {\n        return <ErrorPage error={generateNotFoundError(slug)} log={false} />;\n      }\n    }\n\n    const collective = data && data.account;\n    const canEditCollective = Boolean(LoggedInUser?.isAdminOfCollective(collective));\n    const recurringContributions = collective && collective.orders;\n    const groupedAdminOf = this.getAdministratedAccounts(LoggedInUser);\n    const isAdminOfGroups = !isEmpty(groupedAdminOf);\n    const mainGridColumns = isAdminOfGroups ? ['1fr', '250px 1fr'] : ['1fr'];\n    return (\n      <AuthenticatedPage disableSignup>\n        {loadingLoggedInUser || (data?.loading && !isAdminOfGroups) ? (\n          <Container py={[5, 6]}>\n            <Loading />\n          </Container>\n        ) : !LoggedInUser || (!data.loading && !canEditCollective) ? (\n          <Container p={4}>\n            <P p={2} fontSize=\"16px\" textAlign=\"center\">\n              <FormattedMessage\n                id=\"RecurringContributions.permissionError\"\n                defaultMessage=\"You need to be logged in as the admin of this account to view this page.\"\n              />\n            </P>\n            {!LoggedInUser && <SignInOrJoinFree />}\n          </Container>\n        ) : (\n          <Container>\n            <CollectiveNavbar collective={collective} />\n            <MainContainer py={[3, 4]} px={[2, 3, 4]}>\n              <SectionTitle textAlign=\"left\" mb={1}>\n                <FormattedMessage id=\"ManageContributions.Title\" defaultMessage=\"Manage contributions\" />\n              </SectionTitle>\n              <Grid gridTemplateColumns={mainGridColumns} gridGap={32} mt={4}>\n                {isAdminOfGroups && (\n                  <div>\n                    <MenuEntry\n                      href=\"/manage-contributions\"\n                      $isActive={!slug || slug === LoggedInUser.collective.slug}\n                      onClick={() => {}}\n                    >\n                      <Avatar collective={LoggedInUser.collective} size={32} />\n                      <Span ml={3}>\n                        <FormattedMessage id=\"ContributionFlow.PersonalProfile\" defaultMessage=\"Personal profile\" />\n                      </Span>\n                    </MenuEntry>\n                    {Object.entries(groupedAdminOf).map(([collectiveType, members]) => (\n                      <div key={collectiveType}>\n                        <Flex alignItems=\"center\" px={2} mt={3} mb={2}>\n                          <Span fontWeight=\"bold\" color=\"black.700\" fontSize=\"14px\">\n                            {formatCollectiveType(intl, collectiveType, 2)}\n                          </Span>\n                          <StyledHr ml={2} width=\"100%\" borderColor=\"black.300\" />\n                        </Flex>\n                        {members.map(m => (\n                          <MenuEntry\n                            key={m.id}\n                            href={`/${m.collective.slug}/manage-contributions`}\n                            title={m.collective.name}\n                            $isActive={slug === m.collective.slug}\n                          >\n                            <Avatar collective={m.collective} size={32} />\n                            <Span ml={3} truncateOverflow>\n                              {m.collective.name}\n                            </Span>\n                          </MenuEntry>\n                        ))}\n                      </div>\n                    ))}\n                  </div>\n                )}\n                <RecurringContributionsContainer\n                  recurringContributions={recurringContributions}\n                  account={collective}\n                  isLoading={data.loading}\n                  displayFilters\n                />\n              </Grid>\n            </MainContainer>\n          </Container>\n        )}\n      </AuthenticatedPage>\n    );\n  }\n}\n\nconst addManageContributionsPageData = graphql(manageContributionsQuery, {\n  skip: props => !props.LoggedInUser,\n  options: props => ({\n    context: API_V2_CONTEXT,\n    variables: {\n      // If slug is passed in the URL (e.g. /facebook/manage-contributions), use it.\n      // Otherwise, use the slug of the LoggedInUser.\n      slug: props.slug || props.LoggedInUser?.collective?.slug,\n    },\n  }),\n});\n\nexport default withRouter(withUser(injectIntl(addManageContributionsPageData(ManageContributionsPage))));\n","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/manage-contributions\",\n      function () {\n        return require(\"private-next-pages/manage-contributions.js\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/manage-contributions\"])\n      });\n    }\n  "],"names":["React","FormattedMessage","Container","Flex","Loading","MessageBox","Page","SignInOrJoinFree","withUser","AuthenticatedPage","loadingLoggedInUser","LoggedInUser","props","disableSignup","rootOnly","isRoot","children","pageProps","renderContent","Component","dayjs","GQLV2_SUPPORTED_PAYMENT_METHOD_TYPES","PAYMENT_METHOD_SERVICE","PAYMENT_METHOD_TYPE","getIntervalFromContributionFrequency","CreditCard","NewCreditCardForm","PayWithPaypalButton","StyledButton","TOAST_TYPE","useToasts","getSubscriptionStartDate","order","nextChargeDate","isAfter","STRIPE","AddPaymentMethod","onStripeReady","onPaypalSuccess","setNewPaymentMethodInfo","isSubmitting","host","toAccount","hasStripe","supportedPaymentMethods","includes","CREDIT_CARD","hasPaypal","PAYPAL","defaultProvider","useState","selectedProvider","setSelectedProvider","addToast","paypalClientId","totalAmount","valueInCents","currency","frequency","tier","height","size","e","type","ERROR","title","message","subscriptionId","service","SUBSCRIPTION","paypalInfo","Fragment","useEffect","gql","useMutation","useQuery","CardElement","Lock","themeGet","defineMessages","useIntl","styled","getErrorFromGraphqlException","API_V2_CONTEXT","getPaymentMethodName","getPaymentMethodIcon","getPaymentMethodMetadata","getStripe","stripeTokenToPaymentMethod","Box","I18nFormatters","LoadingPlaceholder","withStripeLoader","StyledHr","StyledRadioList","StyledRoundButton","P","PaymentMethodBox","messages","updatePaymentMethod","id","defaultMessage","addPaymentMethod","paymentMethodFragment","paymentMethodsQuery","updatePaymentMethodMutation","paymentMethodResponseFragment","addCreditCardMutation","confirmCreditCardMutation","mutationOptions","context","sortAndFilterPaymentMethods","paymentMethods","contribution","addedPaymentMethod","existingPaymentMethod","minBalance","amount","uniquePMs","getIsDisabled","pm","balance","some","unshift","sort","pm1","pm2","map","key","subtitle","icon","paymentMethod","disabled","CollectiveId","account","useUpdatePaymentMethod","submitUpdatePaymentMethod","loading","hasUpdate","variables","paypalSubscriptionId","value","SUCCESS","errorMsg","UpdatePaymentMethodPopUp","onCloseEdit","loadStripe","intl","showAddPaymentMethod","setShowAddPaymentMethod","selectedPaymentMethod","setSelectedPaymentMethod","loadingSelectedPaymentMethod","setLoadingSelectedPaymentMethod","stripe","setStripe","stripeElements","setStripeElements","newPaymentMethodInfo","setAddedPaymentMethod","addingPaymentMethod","setAddingPaymentMethod","accountId","orderId","fetchPolicy","data","refetch","submitAddPaymentMethod","submitConfirmPaymentMethodMutation","handleAddPaymentMethodResponse","response","stripeError","handleStripeError","handleSuccess","handleCardSetup","setupIntent","client_secret","result","error","confirmCreditCard","filterPaymentMethodsParams","paymentOptions","useMemo","filter","option","find","formatMessage","paypalPaymentMethod","radio","complete","cardElement","getElement","createToken","token","newStripePaymentMethod","newCreditCardInfo","creditCardInfo","name","res","addCreditCard","then","flexBasis","graphql","css","memoizeOne","withRouter","injectIntl","generateNotFoundError","formatCollectiveType","Avatar","CollectiveNavbar","Dimensions","SectionTitle","ErrorPage","Grid","Link","manageContributionsQuery","RecurringContributionsContainer","Span","MainContainer","MAX_SECTION_WIDTH","MenuEntry","$isActive","fontWeight","backgroundColor","ManageContributionsPage","loggedInUser","adminMemberships","memberOf","m","role","collective","isIncognito","uniqMemberships","groupedMemberships","memberships","slug","router","startsWith","replace","canEditCollective","Boolean","isAdminOfCollective","recurringContributions","orders","groupedAdminOf","getAdministratedAccounts","isAdminOfGroups","mainGridColumns","Object","entries","collectiveType","members","query","addManageContributionsPageData","skip","options"],"sourceRoot":""}